{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MZBench\n\n\nExpressive, scalable load testing tool\n\n\n\n\n\n\nMZBench\n helps developers test software under huge load. With this, it helps reduce the risk of outages under real-life high load. \n\n\nMZBench runs test scenarios on many machines simultaneously, maintaining millions of connections. This makes it suitable even for large scale products (we\nre talking Facebook large scale here).\n\n\nMZBench is:\n\n\n\n\ncloud-aware:\n allocates nodes directly from Amazon EC2 \n\n\nscalable:\n tested with 100 nodes and millions of connections\n\n\nextendable:\n lets you write your own \ncloud plugins\n and \nworkers\n\n\nopen-source:\n released under the \nBSD license\n\n\n\n\nInstallation\n\n\nTo use MZBench, you\nll need:\n\n\n\n\nErlang \n= 17.1\n\n\nC++ compiler\n\n\nPython 2.6 or 2.7 with pip\n\n\n\n\nMost UNIX systems have C++ compiler and Python preinstalled.\n\n\nErlang is available in the \nofficial repositories on most GNU/Linux distros\n. If your distro doesn\nt have Erlang R17, \nbuild it from source\n.  \n\n\nDownload MZBench from GitHub and install Python requirements:\n\n\n$ git clone https://github.com/machinezone/mzbench\n$ sudo pip install -r mzbench/requirements.txt \n\n\n\n\nQuickstart\n\n\nStart the MZBench server on localhost:\n\n\n$ cd mzbench\n$ ./bin/mzbench start_server\nExecuting make -C /path/to//mzbench/bin/../server generate\nExecuting /path/to//mzbench/bin/../server/_build/default/rel/mzbench_api/bin/mzbench_api start\n\n\n\n\n\n\nNote\n\n\nThe first server start takes a few minutes. The shell will not respond, which is OK; please be patient. Further starts will be much faster.\n\n\n\n\nWhen the server is running, launch an example benchmark:\n\n\n$ ./bin/mzbench run workers/http/examples/localhost.bdl\n{\n    \nstatus\n: \npending\n, \n    \nid\n: 6\n}\nstatus: running                       00:09\n\n\n\n\nGo to \nlocalhost:4800\n and see the benchmark live status:\n\n\n\n\nHow It Works\n\n\nMZBench runs your test scenarios on many \nnodes\n, simultaneously. This allows it to put extraordinarily high load on the target system\u2014we\nre talking about \nmillions\n of simultaneous connections here.\n\n\nNode\n is a machine, virtual or physical, that runs your scenarios. In real-life testing, MZBench is used with a cloud service like Amazon EC2 that provides nodes on demand. Alternatively, you can manually list the available node hosts. Anyway, you have to provide MZBench the machines to run on. If there\ns not enough nodes to run all the jobs at the same time, MZBench evenly distributes the jobs between the available nodes.\n\n\nThere\ns one node that doesn\nt run scenarios\u2014the \ndirector node\n. It collects the metrics from the other nodes and runs \npost and pre hooks\n. So, if you want to run jobs on 10 nodes, reserve 11.\n\n\n\n\nWhen the MZBench server runs your scenarios, it allocates the nodes, prepares them, and distributes the jobs. During the test run, the nodes send the collected data to the director node which then submits them to the server. The server uses the data to render graphs and show stats:\n\n\n\n\nTo know what kind of jobs MZBench can run, it\ns important to understand the concept of a \nworker\n.\n\n\nWorker\n is an Erlang module that provides functions for test scenarios. A worker may implement a common protocol like HTTP or XMPP, or a specific routine that is relevant only for a particular test case. It also implements the related metrics.\n\n\nMZBench ships with workers for \nHTTP\n and \nXMPP\n protocols and a worker that \nexecutes shell commands\n. This should be enough for most common test cases, but you can use your own workers in necessary.\n\n\nRead Next\n\n\n\n\nHow to write scenarios \u2192\n\n\nHow to control MZBench from command line \u2192\n\n\nHow to deploy MZBench \u2192\n\n\nHow to write your own worker \u2192", 
            "title": "Overview"
        }, 
        {
            "location": "/#welcome-to-mzbench", 
            "text": "Expressive, scalable load testing tool    MZBench  helps developers test software under huge load. With this, it helps reduce the risk of outages under real-life high load.   MZBench runs test scenarios on many machines simultaneously, maintaining millions of connections. This makes it suitable even for large scale products (we re talking Facebook large scale here).  MZBench is:   cloud-aware:  allocates nodes directly from Amazon EC2   scalable:  tested with 100 nodes and millions of connections  extendable:  lets you write your own  cloud plugins  and  workers  open-source:  released under the  BSD license", 
            "title": "Welcome to MZBench"
        }, 
        {
            "location": "/#installation", 
            "text": "To use MZBench, you ll need:   Erlang  = 17.1  C++ compiler  Python 2.6 or 2.7 with pip   Most UNIX systems have C++ compiler and Python preinstalled.  Erlang is available in the  official repositories on most GNU/Linux distros . If your distro doesn t have Erlang R17,  build it from source .    Download MZBench from GitHub and install Python requirements:  $ git clone https://github.com/machinezone/mzbench\n$ sudo pip install -r mzbench/requirements.txt", 
            "title": "Installation"
        }, 
        {
            "location": "/#quickstart", 
            "text": "Start the MZBench server on localhost:  $ cd mzbench\n$ ./bin/mzbench start_server\nExecuting make -C /path/to//mzbench/bin/../server generate\nExecuting /path/to//mzbench/bin/../server/_build/default/rel/mzbench_api/bin/mzbench_api start   Note  The first server start takes a few minutes. The shell will not respond, which is OK; please be patient. Further starts will be much faster.   When the server is running, launch an example benchmark:  $ ./bin/mzbench run workers/http/examples/localhost.bdl\n{\n     status :  pending , \n     id : 6\n}\nstatus: running                       00:09  Go to  localhost:4800  and see the benchmark live status:", 
            "title": "Quickstart"
        }, 
        {
            "location": "/#how-it-works", 
            "text": "MZBench runs your test scenarios on many  nodes , simultaneously. This allows it to put extraordinarily high load on the target system\u2014we re talking about  millions  of simultaneous connections here.  Node  is a machine, virtual or physical, that runs your scenarios. In real-life testing, MZBench is used with a cloud service like Amazon EC2 that provides nodes on demand. Alternatively, you can manually list the available node hosts. Anyway, you have to provide MZBench the machines to run on. If there s not enough nodes to run all the jobs at the same time, MZBench evenly distributes the jobs between the available nodes.  There s one node that doesn t run scenarios\u2014the  director node . It collects the metrics from the other nodes and runs  post and pre hooks . So, if you want to run jobs on 10 nodes, reserve 11.   When the MZBench server runs your scenarios, it allocates the nodes, prepares them, and distributes the jobs. During the test run, the nodes send the collected data to the director node which then submits them to the server. The server uses the data to render graphs and show stats:   To know what kind of jobs MZBench can run, it s important to understand the concept of a  worker .  Worker  is an Erlang module that provides functions for test scenarios. A worker may implement a common protocol like HTTP or XMPP, or a specific routine that is relevant only for a particular test case. It also implements the related metrics.  MZBench ships with workers for  HTTP  and  XMPP  protocols and a worker that  executes shell commands . This should be enough for most common test cases, but you can use your own workers in necessary.", 
            "title": "How It Works"
        }, 
        {
            "location": "/#read-next", 
            "text": "How to write scenarios \u2192  How to control MZBench from command line \u2192  How to deploy MZBench \u2192  How to write your own worker \u2192", 
            "title": "Read Next"
        }, 
        {
            "location": "/scenarios/tutorial/", 
            "text": "How to Write a Scenario\n\n\nScenarios\n describe how you want MZBench to behave during the benchmark. If you\nre testing an online store, your scenario will probably include opening a product page and adding the product to cart. For a search service, the scenario may be searching for a random word. You get the idea.\n\n\nHere\ns how you write a scenario to load-test a locally running web app.\n\n\n\n\n\n\nCreate a file called \nmyscenario.bdl\n with this content:\n\n\npool(size = 1,\n     worker_type = http_worker):\n    connect(\"localhost\", 8080)\n    get(\"/\")\n\n\n\nScenarios are written in \nspecial language\n similar to Python in some aspects. Here\ns what this scenatio means, step by step:\n\n\npool(size = 1,\n     worker_type = http_worker):\n\n\n\nHere we define a \npool\n of workers, namely one worker of type \nhttp_worker\n. Workers of this type can send GET and POST HTTP requests, which is exactly what we need.\n\n\n    connect(\"localhost\", 8080)\n    get(\"/\")\n\n\n\nHere we define the actions that each worker in the pool must perform: connect the target by host and port and send a single GET request to the \n/\n endpoint, i.e. to \nhttp://localhost:8080/\n.\n\n\n\n\n\n\nLaunch the MZBench server and start your scenario:\n\n\n$ ./bin/mzbench start_server\nExecuting make -C /path/to//mzbench/bin/../server generate\n.........\nWaiting for server application start\nWebserver is started at http://127.0.0.1:4800\nActive config file is ~/.config/mzbench/server.config\nok\n\n$ ./bin/mzbench start /path/to/myscenario.bdl\n{\n    \"status\": \"pending\",\n    \"id\": 107\n}\n\n\n\n\n\n\n\nGo to \nlocalhost:4800\n and see your benchmark run and complete:\n\n\n\n\nGreat, it works! But one request isn\nt going to load your web app too much, is it? Let\ns extend our scenario to generate some proper load.\n\n\n\n\n\n\nModify \nmyscenario.bdl\n so that it looks like this:\n\n\npool(size = 1,\n     worker_type = http_worker):\n        connect(\"localhost\", 8080)\n        loop(time = 1 min,\n             rate = 10 rps):\n                get(\"/\")\n\n\n\nWe\nve replaced a single GET request with a \nloop\n that sends 10 requests per second for 1 minute.\n\n\n\n\n\n\nStart the modified scenario:\n\n\n$ ./bin/mzbench start /path/to/myscenario.bdl\n{\n    \"status\": \"pending\",\n    \"id\": 109\n}\n\n\n\nGo to \nlocalhost:4800\n to see a graph updated in real time as your benchmark is running:\n\n\n\n\n\n\n\n\nRead Next\n\n\n\n\nRead the full scenario language spec \u2192\n\n\nLearn about workers and how to write them \u2192\n\n\nLearn how to deploy MZBench \u2192", 
            "title": "How to Write a Scenario"
        }, 
        {
            "location": "/scenarios/tutorial/#how-to-write-a-scenario", 
            "text": "Scenarios  describe how you want MZBench to behave during the benchmark. If you re testing an online store, your scenario will probably include opening a product page and adding the product to cart. For a search service, the scenario may be searching for a random word. You get the idea.  Here s how you write a scenario to load-test a locally running web app.    Create a file called  myscenario.bdl  with this content:  pool(size = 1,\n     worker_type = http_worker):\n    connect(\"localhost\", 8080)\n    get(\"/\")  Scenarios are written in  special language  similar to Python in some aspects. Here s what this scenatio means, step by step:  pool(size = 1,\n     worker_type = http_worker):  Here we define a  pool  of workers, namely one worker of type  http_worker . Workers of this type can send GET and POST HTTP requests, which is exactly what we need.      connect(\"localhost\", 8080)\n    get(\"/\")  Here we define the actions that each worker in the pool must perform: connect the target by host and port and send a single GET request to the  /  endpoint, i.e. to  http://localhost:8080/ .    Launch the MZBench server and start your scenario:  $ ./bin/mzbench start_server\nExecuting make -C /path/to//mzbench/bin/../server generate\n.........\nWaiting for server application start\nWebserver is started at http://127.0.0.1:4800\nActive config file is ~/.config/mzbench/server.config\nok\n\n$ ./bin/mzbench start /path/to/myscenario.bdl\n{\n    \"status\": \"pending\",\n    \"id\": 107\n}    Go to  localhost:4800  and see your benchmark run and complete:   Great, it works! But one request isn t going to load your web app too much, is it? Let s extend our scenario to generate some proper load.    Modify  myscenario.bdl  so that it looks like this:  pool(size = 1,\n     worker_type = http_worker):\n        connect(\"localhost\", 8080)\n        loop(time = 1 min,\n             rate = 10 rps):\n                get(\"/\")  We ve replaced a single GET request with a  loop  that sends 10 requests per second for 1 minute.    Start the modified scenario:  $ ./bin/mzbench start /path/to/myscenario.bdl\n{\n    \"status\": \"pending\",\n    \"id\": 109\n}  Go to  localhost:4800  to see a graph updated in real time as your benchmark is running:", 
            "title": "How to Write a Scenario"
        }, 
        {
            "location": "/scenarios/tutorial/#read-next", 
            "text": "Read the full scenario language spec \u2192  Learn about workers and how to write them \u2192  Learn how to deploy MZBench \u2192", 
            "title": "Read Next"
        }, 
        {
            "location": "/scenarios/spec/", 
            "text": "In MZBench, scenarios are .bdl files written in a special DSL (domain specific language). BDL stands for Benchmark Definition Language. Think of it as a simple ident-based (like python) language with a small set of instructions and measurement units.\n\n\nMZBench test scenarios consist of function calls and multi-line statements. Function name is \nidentifier\n. Indetifier is lower-case letter sequence with numbers and underscore which starts from letter. Function could accept positional arguments or key arguments. Position arguments are values, key arguments are keys with values, for example:\n\n\nmultiline(param1 = 10, param2 = 20):\n    function1(1, 2)\n    function2(param1 = function3(1), param2 = 2)\n    ...\n\n\n\n\nFunction value could be used in some cases, in the example above \nfunction3\n value is used to pass to function2.\n\n\nSome statements only appear at the top level of a scenario. They\nre called \ntop-level statements\n. There\nre two kinds of top-level statements: \ndirectives\n and \npools\n.\n\n\nSee live examples of MZBench scenarios on GitHub \u2192\n\n\nDirectives\n\n\nDirectives\n prepare the system for the benchmark and clean up after. It includes installing an external \nworker\n on test nodes, registering resource files, checking conditions, and executing shell commands before and after the test.\n\n\nTop-Level Directives\n\n\nAll top-level directives are optional.\n\n\nmake_install git\n\n\nmake_install(git = \nURL\n, branch = \nBranch\n, dir = \nDir\n)\n\n\n\n\nInstall an external worker from a remote git repository on the test nodes before running the benchmark.\n\n\nMZBench downloads the worker and builds a .tgz archive, which is then distributed among the nodes and used in future provisions.\n\n\nThe following actions are executed during \nmake_install\n:\n\n\n$ git clone \nURL\n temp_dir\n$ cd temp_dir\n$ git checkout \nBranch\n\n$ cd \nDir\n\n$ make generate_tgz\n\n\n\n\nIf \nbranch\n is not specified, the default git branch is used.\n\n\nIf \ndir\n is not specified, \n.\n is used.\n\n\nmake_install rsync\n\n\nmake_install(rsync = \nlocation\n, exclude = \nsubdir\n)\n\n\n\n\nInstall an external worker with rsync on the test nodes before running the benchmark. Unlike git \nmake_install\n, rsync does not cache worker code.\n\n\ndefaults\n\n\ndefaults(\nVarName1\n = \nValue1\n, \nVarName2\n = \nValue2\n, ...)\n\n\n\n\nAllows to define the default values for environment variables, i.e. the values used if no value was provided for this variable on the command line.\n\n\nSee \nEnvironment Variables\n for additional information.\n\n\ninclude_resource\n\n\ninclude_resource(\nResourceName\n, \nFileName\n, \nType\n)\ninclude_resource(\nResourceName\n, \nFileURL\n, \nType\n)\n\n\n\n\nRegister a \nresource file\n as \nResourceName\n.\n\n\nIf the file is on your local machine, put it in the same directory where your scenario is.\n\n\nType\n is one of the following atoms:\n\n\n\n\ntext\n\n\nPlain text file, interpreted as a single string.\n\n\njson\n\n\nJSON file. Lists are interpreted as \nErlang lists\n, objects are interpreted as \nErlang maps\n.\n\n\ntsv\n\n\nFile with tabulation separated values, interpreted as a list of lists.\n\n\nerlang\n\n\nErlang source file, interpreted directly as an \nErlang term\n.\n\n\nbinary\n\n\nCustom binary (image, executable, archive, etc.), not interpreted.\n\n\n\n\npre_hook and post_hook\n\n\npre_hook():\n    \nActions\n\npost_hook():\n    \nActions\n\n\n\n\n\nRun actions before and after the benchmark. Two kinds of actions are supported: \nexec commands\n and \nworker calls\n:\n\n\nActions = Action1\n          Action2\n          ...\nAction = exec(Target, BashCommand)\n    | worker_call(WorkerMethod, WorkerModule)\n    | worker_call(WorkerMethod, WorkerModule, WorkerType)\nTarget = all | director\n\n\n\nExec commands\n let you to run any shell command on all nodes or only on the director node.\n\n\nWorker calls\n are functions defined by the worker. They can be executed only on the director node. Worker calls are used to update the \nenvironment variables\n used in the benchmark. An example is available in dummy_worker \ncode\n.\n\n\nassert\n\n\nassert(always, \nExpression\n)\nassert(\nTime\n, \nExpression\n)\n\n\n\n\nCheck if the condition \nExpression\n is satisfied throughout the entire benchmark or at least for the amount of time \nTime\n.\n\n\nExpression\n is a logical expression composed of conditions \nOperand1\n \nOperation\n \nOperand2\n with binary (and, or), unary (not) logical operators and parenthesis.\n\n\nOperation\n is one of four atoms:\n\n\n\n\n\n\nLess than.\n\n\n\n\nGreater than.\n\n\n=\n\n\nLess than or equal to.\n\n\n=\n\n\nGreater than or equal to.\n\n\n==\n\n\nEqual to.\n\n\n!=\n\n\nNot equal to.\n\n\n\n\nOperand1\n and \nOperand2\n are the values to compare. They can be integers, floats, or \nmetrics\n wildcards.\n\n\nMetrics\n are numerical values collected by the worker during the benchmark. To get the metric value, put its name between double quotation marks:\n\n\n(\nh*k\n \n 20) and (not \nhttp_ok\n \n 100)\n\n\n\n\nThe \nhttp_ok\n metric is provided by the \nsimple_http\n worker. This condition passes if the number of successful HTTP responses is greater than 20.\n\n\nWhen multiple metrics are matched against wildcard, condition is checked for every matched metric.\n\n\nPlease note that signals are automatically converted to gauges and could be also used for asserts.\n\n\nPools\n\n\nPool\n represents a sequence of \njobs\n\u2014statements to run. The statements are defined by the \nworker\n and \nMZBench\ns standard library\n. The jobs are evenly distributed between nodes, so they can be executed in parallel.\n\n\nHere\ns a pool that sends HTTP GET requests to two sites on 10 nodes in parallel:\n\n\n    pool(size = 10, worker_type = simple_http_worker):\n        get(\nhttp://example.com\n)\n        get(\nhttp://foobar.com\n)\n\n\n\n\nThe \nget\n statement is provided by the built-in \nsimple_http\n worker.\n\n\nThe first param in the \npool\n statement is a list of \npool options\n.\n\n\nPool Options\n\n\nsize\n\n\nrequired\n\n\nsize = \nNumberOfJobs\n\n\n\n\n\nHow many times you want the pool executed.\n\n\nIf there\ns enough nodes and \nworker_start\n is not set, MZBench will start the jobs simultaneously and run them in parallel.\n\n\nNumberOfJobs\n is any positive number.\n\n\nworker_type\n\n\nrequired\n\n\nworker_type = \nWorkerName\n\n\n\n\n\nThe worker that provides statements for the jobs.\n\n\n\n\nHint\n\n\nA pool uses exactly one worker. If you need multiple workers in the benchmark, just write a pool for each one.\n\n\n\n\nworker_start\n\n\nworker_start = linear(\nRate\n)\nworker_start = poisson(\nRate\n)\nworker_start = exp(\nScale\n, \nTime\n)\nworker_start = pow(\nExponent\n, \nScale\n, \nTime\n)\n\n\n\n\nStart the jobs with a given rate:\n\n\n\n\nlinear\n\n\nConstant rate \nRate\n, e.g. 10 per minute.\n\n\npoisson\n\n\nRate defined by a \nPoisson process\n with \u03bb = \nRate\n.\n\n\nexp\n\n\n\n\nStart jobs with \nexponentially growing\n rate with the scale factor \nScale\n:\n\n\nScale \u00d7 e\nTime\n\n\n\n\npow\n\n\n\n\nStart jobs with rate growing as a \npower function\n with the exponent \nExponent\n and the scale factor \nScale\n:\n\n\nScale \u00d7 Time\nExponent\n\n\n\n\n\n\nramp\n\n\nramp(linear, \nStartRate\n, \nEndRate\n)\n\n\n\n\nLinearly change the rate from \nStartRate\n at the beginning of the pool to \nEndRate\n at its end.\n\n\ncomb\n\n\ncomb(\nRate1\n, \nTime1\n, \nRate2\n, \nTime2\n, ...)\n\n\n\n\nStart jobs with rate \nRate1\n for \nTime1\n, then switch to \nRate2\n for \nTime2\n, etc.\n\n\nLoops\n\n\nLoop\n is a sequence of statements executed over and over for a given time.\n\n\nA loop looks similar to a \npool\n\u2014it consists of a list of \noptions\n and a list statements to run:\n\n\nloop(time = \nTime\n,\n     rate = \nRate\n,\n     parallel = \nN\n,\n     iterator = \nName\n,\n     spawn = \nSpawn\n,\n     while = \nCondition\n):\n    \nStatement1\n\n    \nStatement2\n\n    ...\n\n\n\n\nHere\ns a loop that sends HTTP GET requests for 30 seconds with a growing rate of 1 \u2192 5 rps:\n\n\nloop(time = 30 sec,\n     rate = ramp(linear, 1 rps, 5 rps)):\n        get(\nhttp://example.com\n)\n\n\n\n\nYou can put loops inside loops. Here\ns a nested loop that sends HTTP GET requests for 30 seconds, increasing the rate by 1 rps every three seconds:\n\n\nloop(time = 30 sec,\n     rate = 10 rpm,\n     iterator = \ni\n):\n        loop(time = 3 sec,\n             rate = var(\ni\n) rps):\n                get(\nhttp://google.com\n)\n\n\n\n\nThe difference between these two examples is that in the first case the rate is growing smoothly and in the second one it\ns growing in steps.\n\n\nLoop options\n\n\ntime\n\n\nrequired\n\n\ntime = \nTime\n\n\n\n\n\nRun the loop for \nTime\n.\n\n\nrate\n\n\nrate = \nRate\n\n\n\n\n\nRepeat the loop with the \nRate\n rate.\n\n\nthink_time\n\n\nthink_time = [\nTime\n, \nRate\n]\n\n\n\n\nStart jobs with rate \nRate\n for a second, then sleep for \nTime\n and repeat.\n\n\nparallel\n\n\nparallel = \nN\n\n\n\n\n\n\n\nHint\n\n\nWhen parallel loop starts, all workers copy initial thread state. When loop ends all state copies but first are ommited. This note also applies to \nspawn\n mode below.\n\n\n\n\nRun \nN\n iterations of the loop in parallel.\n\n\niterator\n\n\niterator = \nIterName\n\n\n\n\n\nDefine a variable named \nIterName\n inside the loop that contains the current iteration number. It can be accessed with \nvar(\nIterName\n)\n.\n\n\nspawn\n\n\nspawn = (true|false)\n\n\n\n\nIf \ntrue\n, every iteration runs in a separate, spawned process. Default is \nfalse\n.\n\n\nwhile\n\n\nwhile = \nCondition\n\n\n\n\n\nRun this loop while condition is specified. Condition is some metric name compared with \n, \n, \n=\n, \n=\n and \n==\n. For example \n\"print\" \n 10\n. The syntax is similar to \nasserts\n. Please note that metrics are updated once in a 10 seconds (by default), if you set condition for print being less than 10 it does not guarantee print to be equal to 11 after the loop. In this case, \nprint\n could be any number greater than 10 depending on how fast is your loop.\n\n\nLoop conditions are different from global asserts in a two aspects: there is no time-limiting for loop ones and they do not terminate the entire worker thread. If loop assert is not satisfied, your script won\nt be \nfailed\n.\n\n\nResource Files\n\n\nResource file\n is an external data source for the benchmark.\n\n\nTo declare a resource file for the benchmark, use \ninclude_resource\n.\n\n\nOnce the resource file is registered, its content can be included at any place in the scenario using the \nresource\n statement: \nresource(\nResourceName\n)\n.\n\n\nFor example, suppose we have a file \nnames.json\n:\n\n\n[\n    \"Bob\",\n    \"Alice\",\n    \"Guido\"\n]\n\n\n\nHere\ns how you can use this file in a scenario:\n\n\ninclude_resource(names, \nnames.json\n, json)\npool(size = 3,\n     worker_type = dummy_worker):\n    loop(time = 5 sec,\n         rate = 1 rps):\n        print(choose(resource(names))) # print a random name from the file\n\n\n\n\nStandard Library\n\n\nEnvironment Variables\n\n\nEnvironment variables\n are global values that can be accessed at any point of the benchmark. They are useful to store the benchmark global state like its total duration, or global params like the execution speed.\n\n\nTo set an environment variable, call \nmzbench\n with the \n--env\n param:\n\n\n$ ./bin/mzbench run --env foo=bar --env n=42\n\n\n\n\nvar\n\n\nvar(\nVarName\n)\n\n\n\n\nTo get the value of a variable, refer to it by the name: \nvar(\"\nVarName\n\")\n.\n\n\nvar(\nfoo\n) # returns \nbar\n\nvar(\nn\n) # returns \n42\n, a string\n\n\n\n\nIf you refer to an undefined variable, the benchmark crashes. You can avoid this by setting a default value for the variable, see \ndefaults top-level directive\n.\n\n\nnumvar\n\n\nnumvar(\nVarName\n)\n\n\n\n\nBy default, variable values are considered strings. To get a numerical value (integer or float), use \nnumvar(\"VarName\")\n:\n\n\nnumvar(\nn\n) # returns 42, an integer.\n\n\n\n\nParallelization and Syncing\n\n\nparallel\n\n\nparallel():\n    thread():\n        \nStatement1\n\n    thread():\n        \nStatement2\n\n    ...\n\n\n\n\nExecute multiple statements in parallel. Unlike executing statements in a pool, this way all statements are executed on the same node.\n\n\nset_signal\n\n\nset_signal(\nSignalName\n)\nset_signal(\nSignalName\n, \nCount\n)\n\n\n\n\nEmit a global signal \nSignalName\n.\n\n\nIf \nCount\n is specified, the signal is emitted \nCount\n times.\n\n\nSignalName\n is a string, atom, number, or, in fact, any \nErlang term\n.\n\n\nwait_signal\n\n\nwait_signal(\nSignalName\n)\nwait_signal(\nSignalName\n, \nCount\n)\n\n\n\n\nWait for the global signal \nSignalName\n to be emitted. If \nCount\n is specified, wait for the signal to be emitted \nCount\n times.\n\n\nErrors Handling\n\n\nignore_failure\n\n\nignore_failure():\n    \nStatement\n\n\n\n\n\nExecute the statement \nStatement\n and continue with the benchmark even if it fails.\n\n\nIf the statement succeeds, its result is returned; otherwise, the failure reason is returned.\n\n\nRandomization\n\n\nrandom_number\n\n\nrandom_number(\nMin\n, \nMax\n)\nrandom_number(\nMax\n)\n\n\n\n\nReturn a random number between \nMin\n and \nMax\n, including \nMin\n and not including \nMax\n.\n\n\nrandom_number(\nMax\n)\n is equivalent to \nrandom_number(0, \nMax\n)\n\n\nrandom_list\n\n\nrandom_list(\nSize\n)\n\n\n\n\nReturn a list of random integer of length \nSize\n.\n\n\nrandom_binary\n\n\nrandom_binary(\nSize\n)\n\n\n\n\nReturn a binary sequence of \nSize\n random bytes.\n\n\nchoose\n\n\nchoose(\nN\n, \nList\n)\nchoose(\nList\n)\n\n\n\n\nReturn a list of \nN\n random elements of the list \nList\n.\n\n\nchoose(\nList\n)\n is equivalent to \nchoose(1, \nList\n)\n.\n\n\nround_robin\n\n\nround_robin(\nList\n)\n\n\n\n\nPick the next element of the list. When the last one is picked, start over from the first one.\n\n\nBEWARE:\n The \nround_robin\n function complexity is \nO(n)\n when \nn\n is the length of the \nList\n, so it is extremely slow for big lists. You should consider to cache the value somehow if it is the case.\n\n\nLogging\n\n\ndump\n\n\ndump(\nText\n)\n\n\n\n\nWrite \nText\n to the benchmark log.\n\n\nsprintf\n\n\nsprintf(\nFormat\n, [\nValue1\n, \nValue2\n, ...])\n\n\n\n\nReturn \nformatted text\n with a given format and placeholder values.\n\n\nData Conversion\n\n\nt\n\n\nt(\nList\n)\n\n\n\n\nConvert \nList\n to a tuple.\n\n\nterm_to_binary\n\n\nterm_to_binary(\nterm\n)\n\n\n\n\nConvert an Erlang term to a binary object. \nLearn more\n in the Erlang docs.\n\n\nPause\n\n\nwait\n\n\nwait(\nTime\n)\n\n\n\n\nPause the current job for \nTime\n.\n\n\nConventions\n\n\nMultipliers\n\n\nEvery numerical constant could be followed by a multiplier letter \nK\n, \nM\n, \nG\n or \nT\n. They correspond to 10^3, 10^6, 10^9 and 10^12 respectively.\n\n\n1.1K # 1100\n2.3M # 2300000\n0.5G # 500000000\n\n\n\n\nTime\n\n\nTime\n is a tuple \nDuration\n (ms|sec|min|h)\n:\n\n\n1 sec # one second\n10 min # 10 minutes\n0.5 h # half hour\n\n\n\n\nRate\n\n\nRate\n is a tuple \nN\n (rps|rpm|rph)\n:\n\n\n10K rps # 10000 jobs per second\n12 rpm # 12 jobs per minute\n100 rph # 100 jobs per hour", 
            "title": "Scenario DSL Specification"
        }, 
        {
            "location": "/scenarios/spec/#directives", 
            "text": "Directives  prepare the system for the benchmark and clean up after. It includes installing an external  worker  on test nodes, registering resource files, checking conditions, and executing shell commands before and after the test.", 
            "title": "Directives"
        }, 
        {
            "location": "/scenarios/spec/#top-level-directives", 
            "text": "All top-level directives are optional.", 
            "title": "Top-Level Directives"
        }, 
        {
            "location": "/scenarios/spec/#make_install-git", 
            "text": "make_install(git =  URL , branch =  Branch , dir =  Dir )  Install an external worker from a remote git repository on the test nodes before running the benchmark.  MZBench downloads the worker and builds a .tgz archive, which is then distributed among the nodes and used in future provisions.  The following actions are executed during  make_install :  $ git clone  URL  temp_dir\n$ cd temp_dir\n$ git checkout  Branch \n$ cd  Dir \n$ make generate_tgz  If  branch  is not specified, the default git branch is used.  If  dir  is not specified,  .  is used.", 
            "title": "make_install git"
        }, 
        {
            "location": "/scenarios/spec/#make_install-rsync", 
            "text": "make_install(rsync =  location , exclude =  subdir )  Install an external worker with rsync on the test nodes before running the benchmark. Unlike git  make_install , rsync does not cache worker code.", 
            "title": "make_install rsync"
        }, 
        {
            "location": "/scenarios/spec/#defaults", 
            "text": "defaults( VarName1  =  Value1 ,  VarName2  =  Value2 , ...)  Allows to define the default values for environment variables, i.e. the values used if no value was provided for this variable on the command line.  See  Environment Variables  for additional information.", 
            "title": "defaults"
        }, 
        {
            "location": "/scenarios/spec/#include_resource", 
            "text": "include_resource( ResourceName ,  FileName ,  Type )\ninclude_resource( ResourceName ,  FileURL ,  Type )  Register a  resource file  as  ResourceName .  If the file is on your local machine, put it in the same directory where your scenario is.  Type  is one of the following atoms:   text  Plain text file, interpreted as a single string.  json  JSON file. Lists are interpreted as  Erlang lists , objects are interpreted as  Erlang maps .  tsv  File with tabulation separated values, interpreted as a list of lists.  erlang  Erlang source file, interpreted directly as an  Erlang term .  binary  Custom binary (image, executable, archive, etc.), not interpreted.", 
            "title": "include_resource"
        }, 
        {
            "location": "/scenarios/spec/#pre_hook-and-post_hook", 
            "text": "pre_hook():\n     Actions \npost_hook():\n     Actions   Run actions before and after the benchmark. Two kinds of actions are supported:  exec commands  and  worker calls :  Actions = Action1\n          Action2\n          ...\nAction = exec(Target, BashCommand)\n    | worker_call(WorkerMethod, WorkerModule)\n    | worker_call(WorkerMethod, WorkerModule, WorkerType)\nTarget = all | director  Exec commands  let you to run any shell command on all nodes or only on the director node.  Worker calls  are functions defined by the worker. They can be executed only on the director node. Worker calls are used to update the  environment variables  used in the benchmark. An example is available in dummy_worker  code .", 
            "title": "pre_hook and post_hook"
        }, 
        {
            "location": "/scenarios/spec/#assert", 
            "text": "assert(always,  Expression )\nassert( Time ,  Expression )  Check if the condition  Expression  is satisfied throughout the entire benchmark or at least for the amount of time  Time .  Expression  is a logical expression composed of conditions  Operand1   Operation   Operand2  with binary (and, or), unary (not) logical operators and parenthesis.  Operation  is one of four atoms:    Less than.   Greater than.  =  Less than or equal to.  =  Greater than or equal to.  ==  Equal to.  !=  Not equal to.   Operand1  and  Operand2  are the values to compare. They can be integers, floats, or  metrics  wildcards.  Metrics  are numerical values collected by the worker during the benchmark. To get the metric value, put its name between double quotation marks:  ( h*k    20) and (not  http_ok    100)  The  http_ok  metric is provided by the  simple_http  worker. This condition passes if the number of successful HTTP responses is greater than 20.  When multiple metrics are matched against wildcard, condition is checked for every matched metric.  Please note that signals are automatically converted to gauges and could be also used for asserts.", 
            "title": "assert"
        }, 
        {
            "location": "/scenarios/spec/#pools", 
            "text": "Pool  represents a sequence of  jobs \u2014statements to run. The statements are defined by the  worker  and  MZBench s standard library . The jobs are evenly distributed between nodes, so they can be executed in parallel.  Here s a pool that sends HTTP GET requests to two sites on 10 nodes in parallel:      pool(size = 10, worker_type = simple_http_worker):\n        get( http://example.com )\n        get( http://foobar.com )  The  get  statement is provided by the built-in  simple_http  worker.  The first param in the  pool  statement is a list of  pool options .", 
            "title": "Pools"
        }, 
        {
            "location": "/scenarios/spec/#pool-options", 
            "text": "", 
            "title": "Pool Options"
        }, 
        {
            "location": "/scenarios/spec/#size", 
            "text": "required  size =  NumberOfJobs   How many times you want the pool executed.  If there s enough nodes and  worker_start  is not set, MZBench will start the jobs simultaneously and run them in parallel.  NumberOfJobs  is any positive number.", 
            "title": "size"
        }, 
        {
            "location": "/scenarios/spec/#worker_type", 
            "text": "required  worker_type =  WorkerName   The worker that provides statements for the jobs.   Hint  A pool uses exactly one worker. If you need multiple workers in the benchmark, just write a pool for each one.", 
            "title": "worker_type"
        }, 
        {
            "location": "/scenarios/spec/#worker_start", 
            "text": "worker_start = linear( Rate )\nworker_start = poisson( Rate )\nworker_start = exp( Scale ,  Time )\nworker_start = pow( Exponent ,  Scale ,  Time )  Start the jobs with a given rate:   linear  Constant rate  Rate , e.g. 10 per minute.  poisson  Rate defined by a  Poisson process  with \u03bb =  Rate .  exp   Start jobs with  exponentially growing  rate with the scale factor  Scale :  Scale \u00d7 e Time   pow   Start jobs with rate growing as a  power function  with the exponent  Exponent  and the scale factor  Scale :  Scale \u00d7 Time Exponent", 
            "title": "worker_start"
        }, 
        {
            "location": "/scenarios/spec/#ramp", 
            "text": "ramp(linear,  StartRate ,  EndRate )  Linearly change the rate from  StartRate  at the beginning of the pool to  EndRate  at its end.", 
            "title": "ramp"
        }, 
        {
            "location": "/scenarios/spec/#comb", 
            "text": "comb( Rate1 ,  Time1 ,  Rate2 ,  Time2 , ...)  Start jobs with rate  Rate1  for  Time1 , then switch to  Rate2  for  Time2 , etc.", 
            "title": "comb"
        }, 
        {
            "location": "/scenarios/spec/#loops", 
            "text": "Loop  is a sequence of statements executed over and over for a given time.  A loop looks similar to a  pool \u2014it consists of a list of  options  and a list statements to run:  loop(time =  Time ,\n     rate =  Rate ,\n     parallel =  N ,\n     iterator =  Name ,\n     spawn =  Spawn ,\n     while =  Condition ):\n     Statement1 \n     Statement2 \n    ...  Here s a loop that sends HTTP GET requests for 30 seconds with a growing rate of 1 \u2192 5 rps:  loop(time = 30 sec,\n     rate = ramp(linear, 1 rps, 5 rps)):\n        get( http://example.com )  You can put loops inside loops. Here s a nested loop that sends HTTP GET requests for 30 seconds, increasing the rate by 1 rps every three seconds:  loop(time = 30 sec,\n     rate = 10 rpm,\n     iterator =  i ):\n        loop(time = 3 sec,\n             rate = var( i ) rps):\n                get( http://google.com )  The difference between these two examples is that in the first case the rate is growing smoothly and in the second one it s growing in steps.", 
            "title": "Loops"
        }, 
        {
            "location": "/scenarios/spec/#loop-options", 
            "text": "", 
            "title": "Loop options"
        }, 
        {
            "location": "/scenarios/spec/#time", 
            "text": "required  time =  Time   Run the loop for  Time .", 
            "title": "time"
        }, 
        {
            "location": "/scenarios/spec/#rate", 
            "text": "rate =  Rate   Repeat the loop with the  Rate  rate.", 
            "title": "rate"
        }, 
        {
            "location": "/scenarios/spec/#think_time", 
            "text": "think_time = [ Time ,  Rate ]  Start jobs with rate  Rate  for a second, then sleep for  Time  and repeat.", 
            "title": "think_time"
        }, 
        {
            "location": "/scenarios/spec/#parallel", 
            "text": "parallel =  N    Hint  When parallel loop starts, all workers copy initial thread state. When loop ends all state copies but first are ommited. This note also applies to  spawn  mode below.   Run  N  iterations of the loop in parallel.", 
            "title": "parallel"
        }, 
        {
            "location": "/scenarios/spec/#iterator", 
            "text": "iterator =  IterName   Define a variable named  IterName  inside the loop that contains the current iteration number. It can be accessed with  var( IterName ) .", 
            "title": "iterator"
        }, 
        {
            "location": "/scenarios/spec/#spawn", 
            "text": "spawn = (true|false)  If  true , every iteration runs in a separate, spawned process. Default is  false .", 
            "title": "spawn"
        }, 
        {
            "location": "/scenarios/spec/#while", 
            "text": "while =  Condition   Run this loop while condition is specified. Condition is some metric name compared with  ,  ,  = ,  =  and  == . For example  \"print\"   10 . The syntax is similar to  asserts . Please note that metrics are updated once in a 10 seconds (by default), if you set condition for print being less than 10 it does not guarantee print to be equal to 11 after the loop. In this case,  print  could be any number greater than 10 depending on how fast is your loop.  Loop conditions are different from global asserts in a two aspects: there is no time-limiting for loop ones and they do not terminate the entire worker thread. If loop assert is not satisfied, your script won t be  failed .", 
            "title": "while"
        }, 
        {
            "location": "/scenarios/spec/#resource-files", 
            "text": "Resource file  is an external data source for the benchmark.  To declare a resource file for the benchmark, use  include_resource .  Once the resource file is registered, its content can be included at any place in the scenario using the  resource  statement:  resource( ResourceName ) .  For example, suppose we have a file  names.json :  [\n    \"Bob\",\n    \"Alice\",\n    \"Guido\"\n]  Here s how you can use this file in a scenario:  include_resource(names,  names.json , json)\npool(size = 3,\n     worker_type = dummy_worker):\n    loop(time = 5 sec,\n         rate = 1 rps):\n        print(choose(resource(names))) # print a random name from the file", 
            "title": "Resource Files"
        }, 
        {
            "location": "/scenarios/spec/#standard-library", 
            "text": "", 
            "title": "Standard Library"
        }, 
        {
            "location": "/scenarios/spec/#environment-variables", 
            "text": "Environment variables  are global values that can be accessed at any point of the benchmark. They are useful to store the benchmark global state like its total duration, or global params like the execution speed.  To set an environment variable, call  mzbench  with the  --env  param:  $ ./bin/mzbench run --env foo=bar --env n=42", 
            "title": "Environment Variables"
        }, 
        {
            "location": "/scenarios/spec/#var", 
            "text": "var( VarName )  To get the value of a variable, refer to it by the name:  var(\" VarName \") .  var( foo ) # returns  bar \nvar( n ) # returns  42 , a string  If you refer to an undefined variable, the benchmark crashes. You can avoid this by setting a default value for the variable, see  defaults top-level directive .", 
            "title": "var"
        }, 
        {
            "location": "/scenarios/spec/#numvar", 
            "text": "numvar( VarName )  By default, variable values are considered strings. To get a numerical value (integer or float), use  numvar(\"VarName\") :  numvar( n ) # returns 42, an integer.", 
            "title": "numvar"
        }, 
        {
            "location": "/scenarios/spec/#parallelization-and-syncing", 
            "text": "", 
            "title": "Parallelization and Syncing"
        }, 
        {
            "location": "/scenarios/spec/#parallel_1", 
            "text": "parallel():\n    thread():\n         Statement1 \n    thread():\n         Statement2 \n    ...  Execute multiple statements in parallel. Unlike executing statements in a pool, this way all statements are executed on the same node.", 
            "title": "parallel"
        }, 
        {
            "location": "/scenarios/spec/#set_signal", 
            "text": "set_signal( SignalName )\nset_signal( SignalName ,  Count )  Emit a global signal  SignalName .  If  Count  is specified, the signal is emitted  Count  times.  SignalName  is a string, atom, number, or, in fact, any  Erlang term .", 
            "title": "set_signal"
        }, 
        {
            "location": "/scenarios/spec/#wait_signal", 
            "text": "wait_signal( SignalName )\nwait_signal( SignalName ,  Count )  Wait for the global signal  SignalName  to be emitted. If  Count  is specified, wait for the signal to be emitted  Count  times.", 
            "title": "wait_signal"
        }, 
        {
            "location": "/scenarios/spec/#errors-handling", 
            "text": "", 
            "title": "Errors Handling"
        }, 
        {
            "location": "/scenarios/spec/#ignore_failure", 
            "text": "ignore_failure():\n     Statement   Execute the statement  Statement  and continue with the benchmark even if it fails.  If the statement succeeds, its result is returned; otherwise, the failure reason is returned.", 
            "title": "ignore_failure"
        }, 
        {
            "location": "/scenarios/spec/#randomization", 
            "text": "", 
            "title": "Randomization"
        }, 
        {
            "location": "/scenarios/spec/#random_number", 
            "text": "random_number( Min ,  Max )\nrandom_number( Max )  Return a random number between  Min  and  Max , including  Min  and not including  Max .  random_number( Max )  is equivalent to  random_number(0,  Max )", 
            "title": "random_number"
        }, 
        {
            "location": "/scenarios/spec/#random_list", 
            "text": "random_list( Size )  Return a list of random integer of length  Size .", 
            "title": "random_list"
        }, 
        {
            "location": "/scenarios/spec/#random_binary", 
            "text": "random_binary( Size )  Return a binary sequence of  Size  random bytes.", 
            "title": "random_binary"
        }, 
        {
            "location": "/scenarios/spec/#choose", 
            "text": "choose( N ,  List )\nchoose( List )  Return a list of  N  random elements of the list  List .  choose( List )  is equivalent to  choose(1,  List ) .", 
            "title": "choose"
        }, 
        {
            "location": "/scenarios/spec/#round_robin", 
            "text": "round_robin( List )  Pick the next element of the list. When the last one is picked, start over from the first one.  BEWARE:  The  round_robin  function complexity is  O(n)  when  n  is the length of the  List , so it is extremely slow for big lists. You should consider to cache the value somehow if it is the case.", 
            "title": "round_robin"
        }, 
        {
            "location": "/scenarios/spec/#logging", 
            "text": "", 
            "title": "Logging"
        }, 
        {
            "location": "/scenarios/spec/#dump", 
            "text": "dump( Text )  Write  Text  to the benchmark log.", 
            "title": "dump"
        }, 
        {
            "location": "/scenarios/spec/#sprintf", 
            "text": "sprintf( Format , [ Value1 ,  Value2 , ...])  Return  formatted text  with a given format and placeholder values.", 
            "title": "sprintf"
        }, 
        {
            "location": "/scenarios/spec/#data-conversion", 
            "text": "", 
            "title": "Data Conversion"
        }, 
        {
            "location": "/scenarios/spec/#t", 
            "text": "t( List )  Convert  List  to a tuple.", 
            "title": "t"
        }, 
        {
            "location": "/scenarios/spec/#term_to_binary", 
            "text": "term_to_binary( term )  Convert an Erlang term to a binary object.  Learn more  in the Erlang docs.", 
            "title": "term_to_binary"
        }, 
        {
            "location": "/scenarios/spec/#pause", 
            "text": "", 
            "title": "Pause"
        }, 
        {
            "location": "/scenarios/spec/#wait", 
            "text": "wait( Time )  Pause the current job for  Time .", 
            "title": "wait"
        }, 
        {
            "location": "/scenarios/spec/#conventions", 
            "text": "", 
            "title": "Conventions"
        }, 
        {
            "location": "/scenarios/spec/#multipliers", 
            "text": "Every numerical constant could be followed by a multiplier letter  K ,  M ,  G  or  T . They correspond to 10^3, 10^6, 10^9 and 10^12 respectively.  1.1K # 1100\n2.3M # 2300000\n0.5G # 500000000", 
            "title": "Multipliers"
        }, 
        {
            "location": "/scenarios/spec/#time_1", 
            "text": "Time  is a tuple  Duration  (ms|sec|min|h) :  1 sec # one second\n10 min # 10 minutes\n0.5 h # half hour", 
            "title": "Time"
        }, 
        {
            "location": "/scenarios/spec/#rate_1", 
            "text": "Rate  is a tuple  N  (rps|rpm|rph) :  10K rps # 10000 jobs per second\n12 rpm # 12 jobs per minute\n100 rph # 100 jobs per hour", 
            "title": "Rate"
        }, 
        {
            "location": "/dashboard/", 
            "text": "Starting a benchmark\n\n\nTo start a new benchmark, press green \n+\n button at the left top, type your\nscenario and press green \nrun\n at the right bottom.\n\n\n\n\nExecution flow\n\n\nOnce benchmark is started it goes through different phases: node allocation,\nprovisioning, script upload, etc. If exclusive label was specified, it will\nwait until no other benchmarks with the same label will be in progress. In this\ncase, it will be identified as \nwait_exclusive\n.\n\n\nWhen \nrunning\n phase begins,\nyou will see charts. There are two built-in groups \nSystem load\n and\n\nMZBench internals\n, the rest of the charts are worker-specific.\n\n\n\n\nWhile benchmark is running it is possible to adjust environmental variables or\nexecute some code on a given percentage of workers.\n\n\n\n\nLogs are available all the time.\n\n\n\n\nComparison\n\n\nIf you need to compare a set of benchmarks you could use \ndashboards\n\nfunctionality. Dashboard mode switch is close to new benchmark green \n+\n.\n\n\nYou need to set a search criteria for your set of comparable dashboards,\nif you don\nt have it, you could always set some unique tag for this set and\nspecify this tag as a criteria.\n\n\n\n\nThere are three kinds of charts for comparison.\n\n\ncompare\n \n lines from different benchmarks are shown at the same time.\n\n\n\n\nregression\n \n bench number or time is X and metric value is Y.\n\n\n\n\nxychart\n \n env variable is X and metric value is Y.\n\n\n\n\nNew data on these dashboards appear as soon as bench finishes.", 
            "title": "UI"
        }, 
        {
            "location": "/dashboard/#starting-a-benchmark", 
            "text": "To start a new benchmark, press green  +  button at the left top, type your\nscenario and press green  run  at the right bottom.", 
            "title": "Starting a benchmark"
        }, 
        {
            "location": "/dashboard/#execution-flow", 
            "text": "Once benchmark is started it goes through different phases: node allocation,\nprovisioning, script upload, etc. If exclusive label was specified, it will\nwait until no other benchmarks with the same label will be in progress. In this\ncase, it will be identified as  wait_exclusive .  When  running  phase begins,\nyou will see charts. There are two built-in groups  System load  and MZBench internals , the rest of the charts are worker-specific.   While benchmark is running it is possible to adjust environmental variables or\nexecute some code on a given percentage of workers.   Logs are available all the time.", 
            "title": "Execution flow"
        }, 
        {
            "location": "/dashboard/#comparison", 
            "text": "If you need to compare a set of benchmarks you could use  dashboards \nfunctionality. Dashboard mode switch is close to new benchmark green  + .  You need to set a search criteria for your set of comparable dashboards,\nif you don t have it, you could always set some unique tag for this set and\nspecify this tag as a criteria.   There are three kinds of charts for comparison.  compare    lines from different benchmarks are shown at the same time.   regression    bench number or time is X and metric value is Y.   xychart    env variable is X and metric value is Y.   New data on these dashboards appear as soon as bench finishes.", 
            "title": "Comparison"
        }, 
        {
            "location": "/cli/", 
            "text": "The \nMZBench CLI\n lets you control the server and benchmarks from the command line. It utilizes the \nMZBench API\n, but goes beyond it: it can do things even without a running MZBench server.\n\n\nThe commands are invoked by the \nmzbench\n script in the \nbin\n directory:\n\n\n# Inside the MZBench directory:\n$ ./bin/mzbench start --env foo=bar --nodes=5\n# or:\n$ cd bin\n$ ./mzbench start --env foo=bar --nodes=5\n\n\n\n\nCommands\n\n\nServer Control\n\n\nstart_server\n\n\n$ ./bin/mzbench start_server\nExecuting make -C /path/to/mzbench/bin/../server generate\n...\n\n\n\n\nStart the MZBench server.\n\n\nOptional params:\n\n\n\n\n--config \nconfig_file\n\n\nPath to the \nserver config\n file.\n\n\n\n\nstop_server\n\n\n$ ./bin/mzbench stop_server\nExecuting make -C /path/to/mzbench/bin/../server generate\n...\n\n\n\n\nStop the MZBench server.\n\n\nrestart_server\n\n\n$ ./bin/mzbench restart_server\nExecuting make -C /path/to/mzbench/bin/../server generate\n...\n\n\n\n\nRestart the MZBench server, i.e. \nstop\n + \nstart\n.\n\n\nOptional params:\n\n\n\n\n--config \nconfig_file\n\n\nPath to the \nserver config\n file.\n\n\n\n\nBenchmark Control\n\n\nstart\n\n\n$ mzbench start --env foo=bar --nodes=5 foo.bdl\n{\n    \nstatus\n: \npending\n,\n    \nid\n: 86\n}\n\n\n\n\nStart the benchmark from the given scenario file.\n\n\nPositional param:\n\n\n\n\nscenario_file\n\n\nThe path to the \nscenario\n file for the benchmark.\n\n\n\n\nOptional params:\n\n\n\n\n--name \nbenchmark_name\n\n\nBenchmark name.\n\n\n--nodes \nnodes\n\n\nNumber of nodes or a comma-separated list of node hostnames to run the benchmark on.\n\n\n--nodes_file \nfilename\n\n\nPath to a file with node hostnames separated by newlines.\n\n\n--env \nname=value\n ...\n\n\nEnvironment variable\n definitions.\n\n\n--cloud \ncloud_provider_name\n\n\nName of the cloud provider from the \nserver config\n. If not specified, the first one on the list is used.\n\n\n--email \nemail\n ...\n\n\nEmails for notifications. When the benchmark finishes, the results will be sent to these emails.\n\n\n--deallocate_after_bench false\n\n\nSkip node deallocation after the benchmark.\n\n\n--provision_nodes false\n\n\nSkip MZBench installation on the nodes.\n\n\n--node_commit=\ncommit\n\n\nCommit hash or branch name in the MZBench repository pointing to the MZBench version to install on the nodes.\n\n\n--exclusive=\nlabel\n\n\nBenchmarks with the same label couldn\nt be executed simultaneously, any further benches with this label will be blocked until its execution finishes.\n\n\n\n\nrun\n\n\n$ mzbench run --env foo=bar --nodes=5 foo.bdl\n{\n    \nstatus\n: \npending\n,\n    \nid\n: 86\n}\n\n\n\n\nSame as \nstart\n, but blocks until the benchmark is complete.\n\n\nPositional param:\n\n\n\n\nscenario_file\n\n\nThe path to the \nscenario\n file for the benchmark.\n\n\n\n\nrun_local\n\n\n$ mzbench run_local --env foo=bar foo.bdl\nExecuting make -C /path/to/mzbench/bin/../node compile\n...\n\n\n\n\nRun the benchmark without a server. The logs are printed to stdout.\n\n\nPositional param:\n\n\n\n\nscenario_file\n\n\nThe path to the \nscenario\n file for the benchmark.\n\n\n\n\nOptional param:\n\n\n\n\n--env \nname=value\n ...\n\n\nEnvironment variable\n definitions.\n\n\n\n\nvalidate\n\n\n$ mzbench validate foo.bdl\nok\n\n\n\n\nValidate the scenario file without executing it.\n\n\nPositional param:\n\n\n\n\nscenario_file\n\n\nThe path to the \nscenario\n file for the benchmark.\n\n\n\n\nstatus\n\n\n$ mzbench status 86\n{\n    \nstatus\n: \nprovisioning\n,\n    \nstart_time\n: \n2015-11-18T13:52:04Z\n\n}\n\n\n\n\nGet the status, start time, and, when completed, finish time of the benchmark.\n\n\nPositional param:\n\n\n\n\nbenchmark_id\n\n\nThe ID of the benchmark as returned by \nstart\n or \nrun\n.\n\n\n\n\nstop\n\n\n$ ./bin/mzbench stop 89\n{\n    \nstatus\n: \nstopped\n\n}\n\n\n\n\nStop the benchmark.\n\n\nPositional param:\n\n\n\n\nbenchmark_id\n\n\nThe ID of the benchmark as returned by \nstart\n or \nrun\n.\n\n\n\n\nlog\n\n\n$ ./bin/mzbench log 89\nStart of log for bench 89\n13:52:05.001 [info] [ API ] Node repo: {git_install_spec,\n...\n\n\n\n\nView the benchmark system logs.\n\n\nPositional param:\n\n\n\n\nbenchmark_id\n\n\nThe ID of the benchmark as returned by \nstart\n or \nrun\n.\n\n\n\n\nuserlog\n\n\n$ ./bin/mzbench userlog 89\nStart of userlog for bench 89\n14:02:47.080 [info] \n0.237.0\n Dummy print: \nFOO\n\n...\n\n\n\n\nView the benchmark worker logs.\n\n\nPositional param:\n\n\n\n\nbenchmark_id\n\n\nThe ID of the benchmark as returned by \nstart\n or \nrun\n.\n\n\n\n\ndata\n\n\n$ ./bin/mzbench data 89\n[\n    {\n        \ntarget\n: \nworkers.pool1.km.ended.rps.value\n,\n        \ndatapoints\n: [\n...\n\n\n\n\nView the metrics data collected during the benchmark.\n\n\nPositional param:\n\n\n\n\nbenchmark_id\n\n\nThe ID of the benchmark as returned by \nstart\n or \nrun\n.\n\n\n\n\nchange_env\n\n\n$ mzbench change_env 86 --env foo=baz\n{\n    \nstatus\n: \nset\n\n}\n\n\n\n\nRedefine an environment variable without interrupting the benchmark:\n\n\nPositional param:\n\n\n\n\nbenchmark_id\n\n\nThe ID of the benchmark as returned by \nstart\n or \nrun\n.\n\n\n\n\nOptional param:\n\n\n\n\n--env \nname=value\n ...\n\n\nEnvironment variable\n definitions.\n\n\n\n\nclusters_info\n\n\n$ mzbench clusters_info\n[\n    {\n        \ntimestamp\n: 1479140779,\n        \nbench_id\n: 29,\n        \nn\n: 2,\n        \nstate\n: \nallocated\n,\n        \nhosts\n: [\n            \n127.0.0.1\n\n        ],\n        \nprovider\n: \nmzb_dummycloud_plugin\n,\n        \nid\n: 5\n    },\n...\n\n\n\n\nCheck for currently allocated clusters.\n\n\nremove_clusters_info\n\n\n$ mzbench remove_cluster_info 5\n{}\n\n\n\n\nRemove cluster from a list of allocated clusters.\n\n\nPositional param:\n\n\n\n\ncluster_id\n\n\nThe ID of the cluster as returned by clusters_info.\n\n\n\n\ndeallocate_cluster\n\n\n$ mzbench deallocate_cluster 5\n{}\n\n\n\n\nDeallocate cluster and remove it from a list of allocated clusters.\n\n\nPositional param:\n\n\n\n\ncluster_id\n\n\nThe ID of the cluster as returned by clusters_info.\n\n\n\n\nadd_tags\n\n\n$ mzbench add_tags 50 a,b\n{}\n\n\n\n\nAdd tags to a specified benchmark.\n\n\nPositional param:\n\n\n\n\nbenchmark_id\n\n\n\n\n\n\nThe ID of the benchmark as returned by \nstart\n or \nrun\n.\n\n\ntags\n\n\nComma-separated tag list.\n\n\n\n\n\n\n\n\nremove_tags\n\n\n$ mzbench remove_tags 50 a,b\n{}\n\n\n\n\nRemove tags from a specified benchmark.\n\n\nPositional param:\n\n\n\n\nbenchmark_id\n\n\n\n\n\n\nThe ID of the benchmark as returned by \nstart\n or \nrun\n.\n\n\ntags\n\n\nComma-separated tag list.\n\n\n\n\n\n\n\n\nrun_command\n\n\n$ mzbench run_command 86 --percent 5 --pool 1 print(\\\n123\\\n)\n{\n    \nstatus\n: \nok\n\n}\n\n\n\n\nRun BDL statement on a given percent of workers without interrupting the benchmark,\nplease note that the code is executed inside current loop and if there is no loop \n\nit wont be executed at all.\n\n\nPositional param:\n\n\n\n\nbenchmark_id\n\n\n\n\n\n\nThe ID of the benchmark as returned by \nstart\n or \nrun\n.\n\n\ncommand\n\n\nBDL statement to be executed.\n\n\n\n\n\n\n\n\nOptional param:\n\n\n\n\n--percent \nvalue\n\n\n\n\n\n\nPercent of workers to execute a command, default value is 100.\n\n\n--pool \nnumber\n\n\nPool number from the top of a script, default value is 1.\n\n\n\n\n\n\n\n\nMisc\n\n\nselfcheck\n\n\n$ mzbench selfcheck\nExecuting /path/to/mzbench/bin/lint.py /path/to/mzbench/bin/../\n\n\n\n\nRun the tests on MZBench.\n\n\nlist_templates\n\n\n$ mzbench list_templates\namqp\nempty\npython_empty\ntcp\n\n\n\n\nList the available worker templates to base \nnew workers\n on.\n\n\nnew_worker\n\n\n$ mzbench new_worker --template python_empty bar\nnew worker bar has been created\n\n\n\n\nCreate a new worker directory for \ndevelopment purposes\n.\n\n\nPositional param:\n\n\n\n\nworker_name\n\n\nThe name of the new worker.\n\n\n\n\nOptional params:\n\n\n\n\n--template \ntemplate_name\n\n\nThe template for the new worker. See the full list of available templates with \nlist_templates\n.", 
            "title": "CLI"
        }, 
        {
            "location": "/cli/#commands", 
            "text": "", 
            "title": "Commands"
        }, 
        {
            "location": "/cli/#server-control", 
            "text": "", 
            "title": "Server Control"
        }, 
        {
            "location": "/cli/#start_server", 
            "text": "$ ./bin/mzbench start_server\nExecuting make -C /path/to/mzbench/bin/../server generate\n...  Start the MZBench server.  Optional params:   --config  config_file  Path to the  server config  file.", 
            "title": "start_server"
        }, 
        {
            "location": "/cli/#stop_server", 
            "text": "$ ./bin/mzbench stop_server\nExecuting make -C /path/to/mzbench/bin/../server generate\n...  Stop the MZBench server.", 
            "title": "stop_server"
        }, 
        {
            "location": "/cli/#restart_server", 
            "text": "$ ./bin/mzbench restart_server\nExecuting make -C /path/to/mzbench/bin/../server generate\n...  Restart the MZBench server, i.e.  stop  +  start .  Optional params:   --config  config_file  Path to the  server config  file.", 
            "title": "restart_server"
        }, 
        {
            "location": "/cli/#benchmark-control", 
            "text": "", 
            "title": "Benchmark Control"
        }, 
        {
            "location": "/cli/#start", 
            "text": "$ mzbench start --env foo=bar --nodes=5 foo.bdl\n{\n     status :  pending ,\n     id : 86\n}  Start the benchmark from the given scenario file.  Positional param:   scenario_file  The path to the  scenario  file for the benchmark.   Optional params:   --name  benchmark_name  Benchmark name.  --nodes  nodes  Number of nodes or a comma-separated list of node hostnames to run the benchmark on.  --nodes_file  filename  Path to a file with node hostnames separated by newlines.  --env  name=value  ...  Environment variable  definitions.  --cloud  cloud_provider_name  Name of the cloud provider from the  server config . If not specified, the first one on the list is used.  --email  email  ...  Emails for notifications. When the benchmark finishes, the results will be sent to these emails.  --deallocate_after_bench false  Skip node deallocation after the benchmark.  --provision_nodes false  Skip MZBench installation on the nodes.  --node_commit= commit  Commit hash or branch name in the MZBench repository pointing to the MZBench version to install on the nodes.  --exclusive= label  Benchmarks with the same label couldn t be executed simultaneously, any further benches with this label will be blocked until its execution finishes.", 
            "title": "start"
        }, 
        {
            "location": "/cli/#run", 
            "text": "$ mzbench run --env foo=bar --nodes=5 foo.bdl\n{\n     status :  pending ,\n     id : 86\n}  Same as  start , but blocks until the benchmark is complete.  Positional param:   scenario_file  The path to the  scenario  file for the benchmark.", 
            "title": "run"
        }, 
        {
            "location": "/cli/#run_local", 
            "text": "$ mzbench run_local --env foo=bar foo.bdl\nExecuting make -C /path/to/mzbench/bin/../node compile\n...  Run the benchmark without a server. The logs are printed to stdout.  Positional param:   scenario_file  The path to the  scenario  file for the benchmark.   Optional param:   --env  name=value  ...  Environment variable  definitions.", 
            "title": "run_local"
        }, 
        {
            "location": "/cli/#validate", 
            "text": "$ mzbench validate foo.bdl\nok  Validate the scenario file without executing it.  Positional param:   scenario_file  The path to the  scenario  file for the benchmark.", 
            "title": "validate"
        }, 
        {
            "location": "/cli/#status", 
            "text": "$ mzbench status 86\n{\n     status :  provisioning ,\n     start_time :  2015-11-18T13:52:04Z \n}  Get the status, start time, and, when completed, finish time of the benchmark.  Positional param:   benchmark_id  The ID of the benchmark as returned by  start  or  run .", 
            "title": "status"
        }, 
        {
            "location": "/cli/#stop", 
            "text": "$ ./bin/mzbench stop 89\n{\n     status :  stopped \n}  Stop the benchmark.  Positional param:   benchmark_id  The ID of the benchmark as returned by  start  or  run .", 
            "title": "stop"
        }, 
        {
            "location": "/cli/#log", 
            "text": "$ ./bin/mzbench log 89\nStart of log for bench 89\n13:52:05.001 [info] [ API ] Node repo: {git_install_spec,\n...  View the benchmark system logs.  Positional param:   benchmark_id  The ID of the benchmark as returned by  start  or  run .", 
            "title": "log"
        }, 
        {
            "location": "/cli/#userlog", 
            "text": "$ ./bin/mzbench userlog 89\nStart of userlog for bench 89\n14:02:47.080 [info]  0.237.0  Dummy print:  FOO \n...  View the benchmark worker logs.  Positional param:   benchmark_id  The ID of the benchmark as returned by  start  or  run .", 
            "title": "userlog"
        }, 
        {
            "location": "/cli/#data", 
            "text": "$ ./bin/mzbench data 89\n[\n    {\n         target :  workers.pool1.km.ended.rps.value ,\n         datapoints : [\n...  View the metrics data collected during the benchmark.  Positional param:   benchmark_id  The ID of the benchmark as returned by  start  or  run .", 
            "title": "data"
        }, 
        {
            "location": "/cli/#change_env", 
            "text": "$ mzbench change_env 86 --env foo=baz\n{\n     status :  set \n}  Redefine an environment variable without interrupting the benchmark:  Positional param:   benchmark_id  The ID of the benchmark as returned by  start  or  run .   Optional param:   --env  name=value  ...  Environment variable  definitions.", 
            "title": "change_env"
        }, 
        {
            "location": "/cli/#clusters_info", 
            "text": "$ mzbench clusters_info\n[\n    {\n         timestamp : 1479140779,\n         bench_id : 29,\n         n : 2,\n         state :  allocated ,\n         hosts : [\n             127.0.0.1 \n        ],\n         provider :  mzb_dummycloud_plugin ,\n         id : 5\n    },\n...  Check for currently allocated clusters.", 
            "title": "clusters_info"
        }, 
        {
            "location": "/cli/#remove_clusters_info", 
            "text": "$ mzbench remove_cluster_info 5\n{}  Remove cluster from a list of allocated clusters.  Positional param:   cluster_id  The ID of the cluster as returned by clusters_info.", 
            "title": "remove_clusters_info"
        }, 
        {
            "location": "/cli/#deallocate_cluster", 
            "text": "$ mzbench deallocate_cluster 5\n{}  Deallocate cluster and remove it from a list of allocated clusters.  Positional param:   cluster_id  The ID of the cluster as returned by clusters_info.", 
            "title": "deallocate_cluster"
        }, 
        {
            "location": "/cli/#add_tags", 
            "text": "$ mzbench add_tags 50 a,b\n{}  Add tags to a specified benchmark.  Positional param:   benchmark_id    The ID of the benchmark as returned by  start  or  run .  tags  Comma-separated tag list.", 
            "title": "add_tags"
        }, 
        {
            "location": "/cli/#remove_tags", 
            "text": "$ mzbench remove_tags 50 a,b\n{}  Remove tags from a specified benchmark.  Positional param:   benchmark_id    The ID of the benchmark as returned by  start  or  run .  tags  Comma-separated tag list.", 
            "title": "remove_tags"
        }, 
        {
            "location": "/cli/#run_command", 
            "text": "$ mzbench run_command 86 --percent 5 --pool 1 print(\\ 123\\ )\n{\n     status :  ok \n}  Run BDL statement on a given percent of workers without interrupting the benchmark,\nplease note that the code is executed inside current loop and if there is no loop  \nit wont be executed at all.  Positional param:   benchmark_id    The ID of the benchmark as returned by  start  or  run .  command  BDL statement to be executed.     Optional param:   --percent  value    Percent of workers to execute a command, default value is 100.  --pool  number  Pool number from the top of a script, default value is 1.", 
            "title": "run_command"
        }, 
        {
            "location": "/cli/#misc", 
            "text": "", 
            "title": "Misc"
        }, 
        {
            "location": "/cli/#selfcheck", 
            "text": "$ mzbench selfcheck\nExecuting /path/to/mzbench/bin/lint.py /path/to/mzbench/bin/../  Run the tests on MZBench.", 
            "title": "selfcheck"
        }, 
        {
            "location": "/cli/#list_templates", 
            "text": "$ mzbench list_templates\namqp\nempty\npython_empty\ntcp  List the available worker templates to base  new workers  on.", 
            "title": "list_templates"
        }, 
        {
            "location": "/cli/#new_worker", 
            "text": "$ mzbench new_worker --template python_empty bar\nnew worker bar has been created  Create a new worker directory for  development purposes .  Positional param:   worker_name  The name of the new worker.   Optional params:   --template  template_name  The template for the new worker. See the full list of available templates with  list_templates .", 
            "title": "new_worker"
        }, 
        {
            "location": "/api/", 
            "text": "The \nMZBench API\n lets you run benchmarks on and collect data from a remote MZBench server with HTTP requests.\n\n\nThe API accepts POST and GET requests and returns data in JSON format or plaintext. In case of an error, the response is \n{\"reason\": \"Error description\", \"reason_code\": \"short_textual_id\"}\n:\n\n\n$ curl 'http://mzbench.myserver.com/status?id=1'\n{\n    \nfinish_time\n: \n2015-11-03T13:41:27Z\n,\n    \nstart_time\n: \n2015-11-03T13:39:21Z\n,\n    \nstatus\n: \ncomplete\n\n}\n\n$ curl 'http://mzbench.myserver.com/logs?id=100500'\n{\n    \nreason\n: \nBenchmark 100500 is not found\n,\n    \nreason_code\n: \nnot_found\n\n}\n\n\n\n\n\n\nImportant\n\n\nIf you have \nlogs\n or \nmetrics compression\n enabled in the server config, make sure you can handle compressed responses from the MZBench API.\n\n\n\n\nEndpoints\n\n\nPOST /start\n\n\nAsk the server to start a benchmark from the given \nscenario file\n. The file is submitted as form data. A successful response is a JSON object with \nid\n and \nstatus\n fields:\n\n\n# Start a benchmark from scenario.bdl:\n$ curl -XPOST --form bench=@scenario.bdl http://mzbench.myserver.com/start\n{\n    \nid\n: 46,\n    \nstatus\n: \npending\n\n}\n\n\n\n\nOptional query parameters:\n\n\n\n\nbenchmark_name\n\n\nThe name of the benchmark.\n\n\nnodes\n\n\n\n\nThe number of nodes to be allocated or a comma-separated list of node hostnames or IP addresses.\n\n\nDefault is \n1\n.\n\n\n\n\ndeallocate_after_bench=false\n\n\nPass to cancel node deallocation after the benchmark has finished.\n\n\nprovision_nodes=false\n\n\nPass to skip MZBench installation on the nodes.\n\n\nnode_commit\n\n\nCommit hash or branch name in the \nMZBench repository\n that should be installed on the nodes.\n\n\n\n\nExamples:\n\n\n# Start scenario.bdl on five cloud nodes:\ncurl -XPOST --form bench=@scenario.bdl http://mzbench.myserver.com/start?nodes=5\n\n# Start scenario.bdl on three preallocated nodes 123.45.67.89 and node.myserver.com:\ncurl -XPOST --form bench=@scenario.bdl http://mzbench.myserver.com/start?nodes=123.45.67.89,node.myserver.com\n\n# Start scenario.bdl and disable cloud nodes deallocation:\ncurl -XPOST --form bench=@scenario.bdl http://mzbench.myserver.com/start?deallocate_after_bench=false\n\n\n\n\nGET /status?id=number\n\n\nRequest the benchmark status. A successful response is a JSON object with the fields \nstatus\n, \nstart_time,\n and \nfinish_time\n:\n\n\n$ curl 'http://mzbench.myserver.com/status?id=122'\n{\n    \nstatus\n:\ncomplete\n,\n    \nstart_time\n:\n2015-08-12T07:25:42Z\n,\n    \nfinish_time\n:\n2015-08-12T07:26:29Z\n\n}\n\n\n\n\nGET /stop?id=number\n\n\nStop the benchmark. In case of success, the response JSON object will contain one field, \nstatus\n:\n\n\n$ curl 'http://mzbench.myserver.com/stop?id=122'\n{\n    \nstatus\n: \nstopped\n\n}\n\n\n\n\nGET /restart?id=number\n\n\nClone and start a previously executed benchmark. The response is the same as for the \nstart\n endpoint:\n\n\n$ curl 'http://mzbench.myserver.com/restart?id=122'\n{\n    \nid\n: 123,\n    \nstatus\n: \npending\n\n}\n\n\n\n\nGET /change_env?id=number\nname=value\n\n\nChange enviroment variables during a bench run.\n\n\n$ curl 'http://mzbench.myserver.com/change_env?id=122\nloop_rate=2'\n{\nstatus\n:\nset\n}\n\n\n\n\nGET /log?id=number\n\n\nRequest benchmark system logs. The response is plaintext.\n\n\nIf the benchmark is still running, the logs will be streamed continuously until it finishes.\n\n\n$ curl 'http://mzbench.myserver.com/log?id=122'\n12:17:16.000 [info] [ API ] Node repo: {git_install_spec,\n                                        \nhttps://github.com/machinezone/mzbench.git\n,\n                                        \n2729662cb1a393f66b84b25b27f58190afd43e85\n,\n                                        \nnode\n}\n...\n\n\n\n\nGET /userlog?id=number\n\n\nRequest benchmark userlogs these logs are worker-specific. The response is plaintext.\n\n\nIf the benchmark is still running, the logs will be streamed continuously until it finishes.\n\n\n$ curl 'http://mzbench.myserver.com/userlog?id=122'\n14:02:47.080 [info] \n0.237.0\n Dummy print: \nFOO\n\n14:02:47.245 [info] \n0.238.0\n Dummy print: \nFOO\n\n14:02:47.331 [info] \n0.239.0\n Dummy print: \nFOO\n\n...\n\n\n\n\nGET /data?id=number\n\n\nRequest benchmark metrics data. The response will be a tab-delimited CSV with timestamp followed by metric name and value:\n\n\n$ curl 'http://mzbench.myserver.com/data?id=1236'\n1439245024  mzb.workers.failed.value    0\n1439245024  mzb.workers.failed.rps.value    0.0\n1439245024  mzb.workers.started.value   2000\n\n\n\n\nMetric data for running benches is streamed similarly to \nlogs\n.\n\n\nGET /results?id=number\n\n\nGet bench final results.\n\n\n$ curl 'http://mzbench.myserver.com/results?id=122'\n{\n    \nsystemload.netrx.utun1.mzb_director49_0\n: {\n        \ntype\n: \ngauge\n,\n        \npercentiles\n: {\n            \nmin\n: 12.975898566003504,\n            \nmax\n: 4831.400347074634,\n            \n95\n: 3401.1115750135386,\n            \n90\n: 882.3189827822952,\n            \n50\n: 18.57593673155794\n        }\n    },\n    \nprint\n: {\n        \nvalue\n: 900,\n        \ntype\n: \ncounter\n,\n        \nrps\n: {\n            \nmin\n: 2.996889528358517,\n            \nmax\n: 3.0588292392263448,\n            \n95\n: 2.9984995508247674,\n            \n90\n: 2.9980785314691816,\n            \n50\n: 2.9975917348002614\n        }\n    }\n...\n\n\n\n\nGET /email_report?id=number\naddr=myname@mydomain.com[,\n]\n\n\nSend email report to addresses specified. Please note that smtp should be properly configured for API server to use this function.\n\n\nGET /server_logs\nseverity=level\n\n\nStream API server logs starting from the point when this command was executed. These logs contain information on node allocations, bench starts and all other operations performing by the server itself. Please note that server logs could be buffered.\n\n\n$ curl 'http://mzbench.myserver.com/server_logs?severity=info'\n17:31:36.770 [info] \n0.714.0\n [ GET ] /stop\n17:31:36.770 [info] \n0.142.0\n [ SERVER ] Stop bench #51 request received\n17:31:36.770 [info] \n0.570.0\n [ BENCH #51 ] Bench final: stopped\n17:31:36.771 [info] \n0.570.0\n [ BENCH #51 ] Stage 'finalize - saving_bench_results': started\n17:31:36.771 [info] \n0.714.0\n [ RESPONSE ] : 200 #{status =\n \nstopped\n}\n\n\n\n\nGET /clusters_info\n\n\nGet information on currently allocated clusters.\n\n\n$ curl 'http://mzbench.myserver.com/clusters_info'\n[{\n    \ntimestamp\n: 1479139259,\n    \nstate\n: \nallocated\n,\n    \nprovider\n: \nmzb_dummycloud_plugin\n,\n    \nn\n: 2,\n    \nid\n: 1,\n    \nhosts\n: [\n127.0.0.1\n],\n    \nbench_id\n: 24\n},\n...\n\n\n\n\nGET /deallocate_cluster?id=number\n\n\nDeallocate cluster and remove it from clusters list.\n\n\n$ curl 'http://mzbench.myserver.com/deallocate_cluster?id=1'\n{\nreason_code\n:\nnot_found\n,\nreason\n:\nCluster not found\n}\n\n\n\n\nGET /remove_cluster_info?id=number\n\n\nRemove cluster from clusters list.\n\n\n$ curl 'http://mzbench.myserver.com/remove_cluster_info?id=1'\n{\nreason_code\n:\nnot_found\n,\nreason\n:\nCluster not found\n}\n\n\n\n\nGET /add_tags?id=number\ntags=a,b,c\n\n\nAdd tags to a given benchmark.\n\n\n$ curl 'http://mzbench.myserver.com/add_tags?id=50\ntags=a,b,c'\n{}\n\n\n\n\nGET /remove_tags?id=number\ntags=a,b,c\n\n\nRemove tags from a given benchmark.\n\n\n$ curl 'http://mzbench.myserver.com/remove_tags?id=50\ntags=a,b'\n{}\n\n\n\n\nConventions\n\n\n\n\nBenchmark ID is a non-negative integer.\n\n\nStatus is a string: \npending\n, \nrunning\n, \ncomplete\n, \nfailed\n, or \nstopped\n.\n\n\nDate is a string in ISO 8601 format: \n2015-08-12T07:25:42Z\n.", 
            "title": "API"
        }, 
        {
            "location": "/api/#endpoints", 
            "text": "", 
            "title": "Endpoints"
        }, 
        {
            "location": "/api/#post-start", 
            "text": "Ask the server to start a benchmark from the given  scenario file . The file is submitted as form data. A successful response is a JSON object with  id  and  status  fields:  # Start a benchmark from scenario.bdl:\n$ curl -XPOST --form bench=@scenario.bdl http://mzbench.myserver.com/start\n{\n     id : 46,\n     status :  pending \n}  Optional query parameters:   benchmark_name  The name of the benchmark.  nodes   The number of nodes to be allocated or a comma-separated list of node hostnames or IP addresses.  Default is  1 .   deallocate_after_bench=false  Pass to cancel node deallocation after the benchmark has finished.  provision_nodes=false  Pass to skip MZBench installation on the nodes.  node_commit  Commit hash or branch name in the  MZBench repository  that should be installed on the nodes.   Examples:  # Start scenario.bdl on five cloud nodes:\ncurl -XPOST --form bench=@scenario.bdl http://mzbench.myserver.com/start?nodes=5\n\n# Start scenario.bdl on three preallocated nodes 123.45.67.89 and node.myserver.com:\ncurl -XPOST --form bench=@scenario.bdl http://mzbench.myserver.com/start?nodes=123.45.67.89,node.myserver.com\n\n# Start scenario.bdl and disable cloud nodes deallocation:\ncurl -XPOST --form bench=@scenario.bdl http://mzbench.myserver.com/start?deallocate_after_bench=false", 
            "title": "POST /start"
        }, 
        {
            "location": "/api/#get-statusidnumber", 
            "text": "Request the benchmark status. A successful response is a JSON object with the fields  status ,  start_time,  and  finish_time :  $ curl 'http://mzbench.myserver.com/status?id=122'\n{\n     status : complete ,\n     start_time : 2015-08-12T07:25:42Z ,\n     finish_time : 2015-08-12T07:26:29Z \n}", 
            "title": "GET /status?id=number"
        }, 
        {
            "location": "/api/#get-stopidnumber", 
            "text": "Stop the benchmark. In case of success, the response JSON object will contain one field,  status :  $ curl 'http://mzbench.myserver.com/stop?id=122'\n{\n     status :  stopped \n}", 
            "title": "GET /stop?id=number"
        }, 
        {
            "location": "/api/#get-restartidnumber", 
            "text": "Clone and start a previously executed benchmark. The response is the same as for the  start  endpoint:  $ curl 'http://mzbench.myserver.com/restart?id=122'\n{\n     id : 123,\n     status :  pending \n}", 
            "title": "GET /restart?id=number"
        }, 
        {
            "location": "/api/#get-change_envidnumbernamevalue", 
            "text": "Change enviroment variables during a bench run.  $ curl 'http://mzbench.myserver.com/change_env?id=122 loop_rate=2'\n{ status : set }", 
            "title": "GET /change_env?id=number&amp;name=value"
        }, 
        {
            "location": "/api/#get-logidnumber", 
            "text": "Request benchmark system logs. The response is plaintext.  If the benchmark is still running, the logs will be streamed continuously until it finishes.  $ curl 'http://mzbench.myserver.com/log?id=122'\n12:17:16.000 [info] [ API ] Node repo: {git_install_spec,\n                                         https://github.com/machinezone/mzbench.git ,\n                                         2729662cb1a393f66b84b25b27f58190afd43e85 ,\n                                         node }\n...", 
            "title": "GET /log?id=number"
        }, 
        {
            "location": "/api/#get-userlogidnumber", 
            "text": "Request benchmark userlogs these logs are worker-specific. The response is plaintext.  If the benchmark is still running, the logs will be streamed continuously until it finishes.  $ curl 'http://mzbench.myserver.com/userlog?id=122'\n14:02:47.080 [info]  0.237.0  Dummy print:  FOO \n14:02:47.245 [info]  0.238.0  Dummy print:  FOO \n14:02:47.331 [info]  0.239.0  Dummy print:  FOO \n...", 
            "title": "GET /userlog?id=number"
        }, 
        {
            "location": "/api/#get-dataidnumber", 
            "text": "Request benchmark metrics data. The response will be a tab-delimited CSV with timestamp followed by metric name and value:  $ curl 'http://mzbench.myserver.com/data?id=1236'\n1439245024  mzb.workers.failed.value    0\n1439245024  mzb.workers.failed.rps.value    0.0\n1439245024  mzb.workers.started.value   2000  Metric data for running benches is streamed similarly to  logs .", 
            "title": "GET /data?id=number"
        }, 
        {
            "location": "/api/#get-resultsidnumber", 
            "text": "Get bench final results.  $ curl 'http://mzbench.myserver.com/results?id=122'\n{\n     systemload.netrx.utun1.mzb_director49_0 : {\n         type :  gauge ,\n         percentiles : {\n             min : 12.975898566003504,\n             max : 4831.400347074634,\n             95 : 3401.1115750135386,\n             90 : 882.3189827822952,\n             50 : 18.57593673155794\n        }\n    },\n     print : {\n         value : 900,\n         type :  counter ,\n         rps : {\n             min : 2.996889528358517,\n             max : 3.0588292392263448,\n             95 : 2.9984995508247674,\n             90 : 2.9980785314691816,\n             50 : 2.9975917348002614\n        }\n    }\n...", 
            "title": "GET /results?id=number"
        }, 
        {
            "location": "/api/#get-email_reportidnumberaddrmynamemydomaincom", 
            "text": "Send email report to addresses specified. Please note that smtp should be properly configured for API server to use this function.", 
            "title": "GET /email_report?id=number&amp;addr=myname@mydomain.com[,...]"
        }, 
        {
            "location": "/api/#get-server_logsseveritylevel", 
            "text": "Stream API server logs starting from the point when this command was executed. These logs contain information on node allocations, bench starts and all other operations performing by the server itself. Please note that server logs could be buffered.  $ curl 'http://mzbench.myserver.com/server_logs?severity=info'\n17:31:36.770 [info]  0.714.0  [ GET ] /stop\n17:31:36.770 [info]  0.142.0  [ SERVER ] Stop bench #51 request received\n17:31:36.770 [info]  0.570.0  [ BENCH #51 ] Bench final: stopped\n17:31:36.771 [info]  0.570.0  [ BENCH #51 ] Stage 'finalize - saving_bench_results': started\n17:31:36.771 [info]  0.714.0  [ RESPONSE ] : 200 #{status =   stopped }", 
            "title": "GET /server_logs&amp;severity=level"
        }, 
        {
            "location": "/api/#get-clusters_info", 
            "text": "Get information on currently allocated clusters.  $ curl 'http://mzbench.myserver.com/clusters_info'\n[{\n     timestamp : 1479139259,\n     state :  allocated ,\n     provider :  mzb_dummycloud_plugin ,\n     n : 2,\n     id : 1,\n     hosts : [ 127.0.0.1 ],\n     bench_id : 24\n},\n...", 
            "title": "GET /clusters_info"
        }, 
        {
            "location": "/api/#get-deallocate_clusteridnumber", 
            "text": "Deallocate cluster and remove it from clusters list.  $ curl 'http://mzbench.myserver.com/deallocate_cluster?id=1'\n{ reason_code : not_found , reason : Cluster not found }", 
            "title": "GET /deallocate_cluster?id=number"
        }, 
        {
            "location": "/api/#get-remove_cluster_infoidnumber", 
            "text": "Remove cluster from clusters list.  $ curl 'http://mzbench.myserver.com/remove_cluster_info?id=1'\n{ reason_code : not_found , reason : Cluster not found }", 
            "title": "GET /remove_cluster_info?id=number"
        }, 
        {
            "location": "/api/#get-add_tagsidnumbertagsabc", 
            "text": "Add tags to a given benchmark.  $ curl 'http://mzbench.myserver.com/add_tags?id=50 tags=a,b,c'\n{}", 
            "title": "GET /add_tags?id=number&amp;tags=a,b,c"
        }, 
        {
            "location": "/api/#get-remove_tagsidnumbertagsabc", 
            "text": "Remove tags from a given benchmark.  $ curl 'http://mzbench.myserver.com/remove_tags?id=50 tags=a,b'\n{}", 
            "title": "GET /remove_tags?id=number&amp;tags=a,b,c"
        }, 
        {
            "location": "/api/#conventions", 
            "text": "Benchmark ID is a non-negative integer.  Status is a string:  pending ,  running ,  complete ,  failed , or  stopped .  Date is a string in ISO 8601 format:  2015-08-12T07:25:42Z .", 
            "title": "Conventions"
        }, 
        {
            "location": "/deployment/", 
            "text": "A complete MZBench installation consists of two parts:\n\n\n\n\nMZBench API server that accepts client requests and provides the dashboard.\n\n\nA set of hosts operating as a worker nodes.\n\n\n\n\nOnce launched, the API server is permanent, whereas the worker nodes are dynamically\nallocated on demand on AWS or another cloud provider.\n\n\nHere\ns how you install and configure MZBench for real-life use.\n\n\nInstallation\n\n\nFrom RPM and Pip\n\n\nAvailable for CentOS 7 and Amazon Linux.\n\n\nRequirement:\n\n\n\n\nPip\n Python package manager\n\n\n\n\nDownload MZBench RPM from \nGithub releases page\n\n\n# Install RPM\nsudo yum install -y \nrpm_file_downloaded_from_github_releases\n\n\n# Install Python package\nsudo pip install mzbench_api_client\n\n# Start the server\nmzbench start_server\n\n\n\n\nMZBench server from RPM has all \nGithub workers\n bundled.\nIf you need to add a worker to this installation, please use \nmzbench add_worker \ntgz_file\n\ncommand. Please refer to \nHow to write your own worker\n\nguide to learn more about generation of this tarball.\n\n\nFrom Docker container\n\n\nDocker is a container platform, more information is available at its \nwebsite\n. If you have Docker up and running, use the following command to start MZBench server:\n\n\ndocker run -d -p 4800:80 --name mzbench_server docker.io/ridrisov/mzbench\n\n\n\n\nAfter that, open http://localhost:4800/ to see the dashboard. Sources for this docker image are available on \ngithub\n.\n\n\nFrom sources\n\n\nRequirements:\n\n\n\n\nErlang R17+\n\n\nC++ compiler (preinstalled on most UNIX-based systems)\n\n\nPython\n 2.6 or 2.7\n\n\nPip\n Python package manager\n\n\n\n\nInstall and start the MZBench API server:\n\n\n# Clone the current MZBench source code\ngit clone https://github.com/machinezone/mzbench.git\n\n# Install Python requirements\nsudo pip install -r mzbench/requirements.txt\n\n# Start the server\n./mzbench/bin/mzbench start_server\n\n\n\n\nConfiguration\n\n\n\n\nNote\n\n\nEvery time you update the configuration, \nrestart the server\n.\n\n\n\n\nFormat\n\n\nThe MZBench server parameters are defined in the configuration file.\n\n\nBy default, the server tries to load configuration from \n~/.config/mzbench/server.config\n and \n/etc/mzbench/server.config\n.\n\n\nTo specify a configuration file from a different location, use the \n--config\n param:\n\n\n$ ./bin/mzbench start_server --config /path/to/server.config\n\n\n\n\nThe configuration file is an Erlang list with the \nmzbench_api\n tuple. This tuple holds the list of the server \nparameters\n:\n\n\n[\n    {mzbench_api, [\n        {network_interface, \n127.0.0.1\n},\n        {listen_port, 80}\n    ]}\n].\n\n\n\n\nHere, two parameters are specified: \nnetwork_interface\n and \nlisten_port\n.\n\n\nAll parameters are optional.\n\n\nParameters\n\n\ncloud_plugins\n\n\n{cloud_plugins: [\n    {\nPluginName\n, #{module =\n \nModuleName\n,\n                    \nOption1\n =\n \nValue1\n,\n                    \nOption2\n =\n \nValue2\n,\n                    ...\n                    }\n    },\n    ...\n    ]\n}\n\n\n\n\nList of \ncloud plugins\n that can be used to allocate nodes. One plugin can be listed multiple times with different settings and under different names.\n\n\nPluginName\n is an atom identifying a plugin instance.\n\n\nModuleName\n is the name of the plugin module. Each module has its specific \nOptions\n.\n\n\nThere are four built-in plugins:\n\n\n\n\nmzb_api_ec2_plugin\n\n\nAllocate hosts from the Amazon EC2 cloud.\n\n\nmzb_staticcloud_plugin\n\n\nAllocates hosts from a static pool.\n\n\nmzb_dummycloud_plugin\n\n\nDummy provider, treats localhost as unlimited number of hosts, useful for debug. It can be also used as a reference during \ncloud plugin development\n.\n\n\nmzb_multicloud_plugin\n\n\nAllocate hosts from multiple sources with the given ratio.\n\n\n\n\nnetwork_interface\n\n\n{network_interface, \nip address\n}\n\n\n\n\nSpecify the IP address for the dashboard to run on. By default it\ns \n\"127.0.0.1\"\n, so the dashboard is unavailable for external connections.\n\n\nTo open the dashboard to the public, set this param to \n\"0.0.0.0\"\n.\n\n\n\n\nWarning\n\n\nBy default MZBench provides no authentication. Opening the dashboard to the public makes your server vulnerable.\n\n\nTo protect your server, please, see \nauthentication\n and \nprotocol\n.\n\n\n\n\nlisten_port\n\n\n{listen_port, \nport\n}\n\n\n\n\nSpecify the port to access the dashboard.\n\n\nDefault value: \n4800\n.\n\n\nprotocol\n\n\nBy default protocol is set to \nhttp\n, but \nhttps\n is also available. MZBench generates self-signed certificates on first start. If you need to replace them, please use the following configuration parameters:\n\n\n{protocol, https},\n{cacertfile, none},\n{certfile, \n~/.local/share/mzbench_api/server.crt\n},\n{keyfile, \n~/.local/share/mzbench_api/server.key\n},\n\n\n\n\nCA certificate is not required unless you use custom CA.\n\n\nauthentication\n\n\nAPI server supports Google and GitHub auth.\n\n\n\n\nTo create Google credentials open \nGoogle API manager page\n. Click Credentials -\n Create credentials -\n OAuth Client ID -\n Web Application, then specify your server URL. Copy \nclient_id\n and \nclient_secret\n to a following structure.\n\n\n\n\n{user_authentication,\n         [\n          {\ngoogle\n, [{caption, \nGoogle\n},\n                      {client_id, \n...\n},\n                      {client_secret, \n...\n},\n                      {redirect_url, \nhttp://localhost:4800\n}]}\n         ]\n     }\n\n\n\n\nhttp://localhost:4800\n should be replaced with your server\ns address.\n\n\n\n\nTo create GitHub credentials open \nGitHub developer application\n page. Click Register New Application. Put your server url to \nHomepage URL\n and \nAuthorization callback URL\n and click \nRegister application\n.\n\n\n\n\n{user_authentication,\n         [\n          {\ngithub\n, [{caption, \nGitHub\n},\n                      {client_id, \n...\n},\n                      {client_secret, \n...\n}]}\n         ]\n     }\n\n\n\n\nIf GitHub Enterprise is used it may be usefull to add the following two parameters:\n\n\n    {url, \nhttps://\nGitHub URL\n},\n    {api_url, \nhttps://\nGitHub API URL\n},\n\n\n\n\nAfter successful setup you will be able to authorize yourself at dashboard and create tokens for Command Line Utilities (CLI). To create one hover your name at top-right corner of the dashboard and click \nGenerate token\n link.\nWhen token is generated it should be saved in ~/.config/mzbench/token file. If multiple mzbench servers are used token file could be organized the following way:\n\n\nServer1\n \nToken1\n\n\nServer2\n \nToken2\n\n\nServer3\n \nToken3\n\n...\n\n\n\n\naccess_lists\n\n\nIt is possible to specify white and black user lists in a following way:\n\n\n    {admin_list, [\n*@mydomain-admins.com\n, \nroot@mydomain.com\n]},\n    {black_list, [\nhacker*\n, \nsingle-hacker@mydomain.com\n]},\n    {white_list, [\ntester*@mydomain.com\n, \nsingle-tester@mydomain.com\n]},\n\n\n\n\nAdministrators have privileges to stop any benchmark. Blacklisted users have no access. If white list is used, all users, except this list have no access.\n\n\nbench_log_file\n\n\n{bench_log_file, \nfilename\n}\n\n\n\n\nThe name of the benchmark log files. The files are stored in \nbench_data_dir\n/\nbench_id\n where \nbench_data_dir\n is defined in the \nbench_data_dir\n param and \nid\n is the ID of a particular benchmark.\n\n\nDefault value: \n\"log.txt\"\n\n\nbench_log_compression\n\n\n{bench_log_compression, (deflate|none)}\n\n\n\n\nEnable or disable log compression with the \nDEFLATE\n algorithm.\n\n\nDefault value: \ndeflate\n\n\nbench_metrics_file\n\n\n{bench_metrics_file, \nfilename\n}\n\n\n\n\nThe name of the benchmark metrics data files. The files are stored in \nbench_data_dir\n/\nbench_id\n where \nbench_data_dir\n is defined in the \nbench_data_dir\n param and \nid\n is the ID of a particular benchmark.\n\n\nDefault value: \n\"metrics.txt\"\n\n\nbench_metrics_compression\n\n\n{bench_metrics_compression, (none|deflate)}\n\n\n\n\nEnable or disable metrics data compression with the \nDEFLATE\n algorithm.\n\n\nDefault value: \nnone\n\n\nnode_git\n\n\n{node_git, \nurl\n}\n\n\n\n\nThe MZBench git repository used to deploy worker nodes.\n\n\nBy default, the MZBench source code is taken from \nhttps://github.com/machinezone/mzbench.git\n.\n\n\nnode_commit\n\n\n{node_commit, \nstring\n}\n\n\n\n\nThe git commit SHA or branch name used to deploy worker nodes.\n\n\nBy default, the latest revision is used.\n\n\nnode_rsync\n\n\n{node_rsync, \nfolder\n}\n\n\n\n\nUse local folder when deploying worker nodes. This option has a precedency over node_git.\n\n\nnode_deployment_path\n\n\n{node_deployment_path, \npath\n}\n\n\n\n\nThe path to the MZBench installation on node machines.\n\n\nDefault value: \n\"/.local/share\"\n\n\nworker_deployment_path\n\n\n{worker_deployment_path, \npath\n}\n\n\n\n\nThe to the \nworkers\n installation on node machines.\n\n\nDefault value: \n\"~/.local/share/mzbench_workers\"\n\n\nplugins_dir\n\n\n{plugins_dir, \npath\n}\n\n\n\n\nDirectory with additional \ncloud plugins\n.\n\n\nDefault value: \n\"../../../../plugins\"\n\n\nbench_data_dir\n\n\n{bench_data_dir, \npath\n}\n\n\n\n\nThe location to store the data generated during the benchmark.\n\n\nDefault value: \n\"~/.local/share/mzbench_api/data\"\n.\n\n\ntgz_packages_dir\n\n\n{tgz_packages_dir, \npath\n}\n\n\n\n\nThe location to store prebuilt worker archives.\n\n\nDefault value: \n\"~/.local/cache/mzbench_api/packages\"\n.\n\n\nmax_bench_num\n\n\n{max_bench_num, \ninteger\n}\n\n\n\n\nMaximal number of benchmarks running at the same time.\n\n\nDefault value: \n1000\n.\n\n\nvm_args\n\n\n{vm_args, \nargs\n}\n\n\n\n\nAdditional arguments for the [Erlang VM](Additional arguments for the \nErlang VM\n.\n\n\nDefault value: \n[]\n.\n\n\nntp_max_timediff\n\n\n{ntp_max_timediff, \nfloat\n}\n\n\n\n\nMaximum timeout between node creation in seconds.\n\n\nThis check is optional and only prints a warning if fails.\n\n\nDefault value: \n0.1\n.\n\n\nDev Parameters\n\n\nSet these params only if you are an MZBench developer.\n\n\nbench_read_at_once\n\n\n{bench_read_at_once, \ninteger\n}\n\n\n\n\nThe number of bytes to read from the logs and metrics feed per request.\n\n\nDefault value: \n1024\n\n\nbench_poll_timeout\n\n\n{bench_poll_timeout, \ninteger\n}\n\n\n\n\nThe timeout between requests to logs and metrics feeds in milliseconds.\n\n\nDefault value: \n1000\n\n\nnode_log_port\n\n\n{node_log_port, \ninteger\n}\n\n\n\n\nThe TCP port for the logs feed.\n\n\nDefault value: \n4801\n.\n\n\nnode_management_port\n\n\n{node_management_port, \ninteger\n}\n\n\n\n\nThe TCP port used to control the server internally.\n\n\nDefault value: \n4802\n.", 
            "title": "Deployment"
        }, 
        {
            "location": "/deployment/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/deployment/#from-rpm-and-pip", 
            "text": "Available for CentOS 7 and Amazon Linux.  Requirement:   Pip  Python package manager   Download MZBench RPM from  Github releases page  # Install RPM\nsudo yum install -y  rpm_file_downloaded_from_github_releases \n\n# Install Python package\nsudo pip install mzbench_api_client\n\n# Start the server\nmzbench start_server  MZBench server from RPM has all  Github workers  bundled.\nIf you need to add a worker to this installation, please use  mzbench add_worker  tgz_file \ncommand. Please refer to  How to write your own worker \nguide to learn more about generation of this tarball.", 
            "title": "From RPM and Pip"
        }, 
        {
            "location": "/deployment/#from-docker-container", 
            "text": "Docker is a container platform, more information is available at its  website . If you have Docker up and running, use the following command to start MZBench server:  docker run -d -p 4800:80 --name mzbench_server docker.io/ridrisov/mzbench  After that, open http://localhost:4800/ to see the dashboard. Sources for this docker image are available on  github .", 
            "title": "From Docker container"
        }, 
        {
            "location": "/deployment/#from-sources", 
            "text": "Requirements:   Erlang R17+  C++ compiler (preinstalled on most UNIX-based systems)  Python  2.6 or 2.7  Pip  Python package manager   Install and start the MZBench API server:  # Clone the current MZBench source code\ngit clone https://github.com/machinezone/mzbench.git\n\n# Install Python requirements\nsudo pip install -r mzbench/requirements.txt\n\n# Start the server\n./mzbench/bin/mzbench start_server", 
            "title": "From sources"
        }, 
        {
            "location": "/deployment/#configuration", 
            "text": "Note  Every time you update the configuration,  restart the server .", 
            "title": "Configuration"
        }, 
        {
            "location": "/deployment/#format", 
            "text": "The MZBench server parameters are defined in the configuration file.  By default, the server tries to load configuration from  ~/.config/mzbench/server.config  and  /etc/mzbench/server.config .  To specify a configuration file from a different location, use the  --config  param:  $ ./bin/mzbench start_server --config /path/to/server.config  The configuration file is an Erlang list with the  mzbench_api  tuple. This tuple holds the list of the server  parameters :  [\n    {mzbench_api, [\n        {network_interface,  127.0.0.1 },\n        {listen_port, 80}\n    ]}\n].  Here, two parameters are specified:  network_interface  and  listen_port .  All parameters are optional.", 
            "title": "Format"
        }, 
        {
            "location": "/deployment/#parameters", 
            "text": "", 
            "title": "Parameters"
        }, 
        {
            "location": "/deployment/#cloud_plugins", 
            "text": "{cloud_plugins: [\n    { PluginName , #{module =   ModuleName ,\n                     Option1  =   Value1 ,\n                     Option2  =   Value2 ,\n                    ...\n                    }\n    },\n    ...\n    ]\n}  List of  cloud plugins  that can be used to allocate nodes. One plugin can be listed multiple times with different settings and under different names.  PluginName  is an atom identifying a plugin instance.  ModuleName  is the name of the plugin module. Each module has its specific  Options .  There are four built-in plugins:   mzb_api_ec2_plugin  Allocate hosts from the Amazon EC2 cloud.  mzb_staticcloud_plugin  Allocates hosts from a static pool.  mzb_dummycloud_plugin  Dummy provider, treats localhost as unlimited number of hosts, useful for debug. It can be also used as a reference during  cloud plugin development .  mzb_multicloud_plugin  Allocate hosts from multiple sources with the given ratio.", 
            "title": "cloud_plugins"
        }, 
        {
            "location": "/deployment/#network_interface", 
            "text": "{network_interface,  ip address }  Specify the IP address for the dashboard to run on. By default it s  \"127.0.0.1\" , so the dashboard is unavailable for external connections.  To open the dashboard to the public, set this param to  \"0.0.0.0\" .   Warning  By default MZBench provides no authentication. Opening the dashboard to the public makes your server vulnerable.  To protect your server, please, see  authentication  and  protocol .", 
            "title": "network_interface"
        }, 
        {
            "location": "/deployment/#listen_port", 
            "text": "{listen_port,  port }  Specify the port to access the dashboard.  Default value:  4800 .", 
            "title": "listen_port"
        }, 
        {
            "location": "/deployment/#protocol", 
            "text": "By default protocol is set to  http , but  https  is also available. MZBench generates self-signed certificates on first start. If you need to replace them, please use the following configuration parameters:  {protocol, https},\n{cacertfile, none},\n{certfile,  ~/.local/share/mzbench_api/server.crt },\n{keyfile,  ~/.local/share/mzbench_api/server.key },  CA certificate is not required unless you use custom CA.", 
            "title": "protocol"
        }, 
        {
            "location": "/deployment/#authentication", 
            "text": "API server supports Google and GitHub auth.   To create Google credentials open  Google API manager page . Click Credentials -  Create credentials -  OAuth Client ID -  Web Application, then specify your server URL. Copy  client_id  and  client_secret  to a following structure.   {user_authentication,\n         [\n          { google , [{caption,  Google },\n                      {client_id,  ... },\n                      {client_secret,  ... },\n                      {redirect_url,  http://localhost:4800 }]}\n         ]\n     }  http://localhost:4800  should be replaced with your server s address.   To create GitHub credentials open  GitHub developer application  page. Click Register New Application. Put your server url to  Homepage URL  and  Authorization callback URL  and click  Register application .   {user_authentication,\n         [\n          { github , [{caption,  GitHub },\n                      {client_id,  ... },\n                      {client_secret,  ... }]}\n         ]\n     }  If GitHub Enterprise is used it may be usefull to add the following two parameters:      {url,  https:// GitHub URL },\n    {api_url,  https:// GitHub API URL },  After successful setup you will be able to authorize yourself at dashboard and create tokens for Command Line Utilities (CLI). To create one hover your name at top-right corner of the dashboard and click  Generate token  link.\nWhen token is generated it should be saved in ~/.config/mzbench/token file. If multiple mzbench servers are used token file could be organized the following way:  Server1   Token1  Server2   Token2  Server3   Token3 \n...", 
            "title": "authentication"
        }, 
        {
            "location": "/deployment/#access_lists", 
            "text": "It is possible to specify white and black user lists in a following way:      {admin_list, [ *@mydomain-admins.com ,  root@mydomain.com ]},\n    {black_list, [ hacker* ,  single-hacker@mydomain.com ]},\n    {white_list, [ tester*@mydomain.com ,  single-tester@mydomain.com ]},  Administrators have privileges to stop any benchmark. Blacklisted users have no access. If white list is used, all users, except this list have no access.", 
            "title": "access_lists"
        }, 
        {
            "location": "/deployment/#bench_log_file", 
            "text": "{bench_log_file,  filename }  The name of the benchmark log files. The files are stored in  bench_data_dir / bench_id  where  bench_data_dir  is defined in the  bench_data_dir  param and  id  is the ID of a particular benchmark.  Default value:  \"log.txt\"", 
            "title": "bench_log_file"
        }, 
        {
            "location": "/deployment/#bench_log_compression", 
            "text": "{bench_log_compression, (deflate|none)}  Enable or disable log compression with the  DEFLATE  algorithm.  Default value:  deflate", 
            "title": "bench_log_compression"
        }, 
        {
            "location": "/deployment/#bench_metrics_file", 
            "text": "{bench_metrics_file,  filename }  The name of the benchmark metrics data files. The files are stored in  bench_data_dir / bench_id  where  bench_data_dir  is defined in the  bench_data_dir  param and  id  is the ID of a particular benchmark.  Default value:  \"metrics.txt\"", 
            "title": "bench_metrics_file"
        }, 
        {
            "location": "/deployment/#bench_metrics_compression", 
            "text": "{bench_metrics_compression, (none|deflate)}  Enable or disable metrics data compression with the  DEFLATE  algorithm.  Default value:  none", 
            "title": "bench_metrics_compression"
        }, 
        {
            "location": "/deployment/#node_git", 
            "text": "{node_git,  url }  The MZBench git repository used to deploy worker nodes.  By default, the MZBench source code is taken from  https://github.com/machinezone/mzbench.git .", 
            "title": "node_git"
        }, 
        {
            "location": "/deployment/#node_commit", 
            "text": "{node_commit,  string }  The git commit SHA or branch name used to deploy worker nodes.  By default, the latest revision is used.", 
            "title": "node_commit"
        }, 
        {
            "location": "/deployment/#node_rsync", 
            "text": "{node_rsync,  folder }  Use local folder when deploying worker nodes. This option has a precedency over node_git.", 
            "title": "node_rsync"
        }, 
        {
            "location": "/deployment/#node_deployment_path", 
            "text": "{node_deployment_path,  path }  The path to the MZBench installation on node machines.  Default value:  \"/.local/share\"", 
            "title": "node_deployment_path"
        }, 
        {
            "location": "/deployment/#worker_deployment_path", 
            "text": "{worker_deployment_path,  path }  The to the  workers  installation on node machines.  Default value:  \"~/.local/share/mzbench_workers\"", 
            "title": "worker_deployment_path"
        }, 
        {
            "location": "/deployment/#plugins_dir", 
            "text": "{plugins_dir,  path }  Directory with additional  cloud plugins .  Default value:  \"../../../../plugins\"", 
            "title": "plugins_dir"
        }, 
        {
            "location": "/deployment/#bench_data_dir", 
            "text": "{bench_data_dir,  path }  The location to store the data generated during the benchmark.  Default value:  \"~/.local/share/mzbench_api/data\" .", 
            "title": "bench_data_dir"
        }, 
        {
            "location": "/deployment/#tgz_packages_dir", 
            "text": "{tgz_packages_dir,  path }  The location to store prebuilt worker archives.  Default value:  \"~/.local/cache/mzbench_api/packages\" .", 
            "title": "tgz_packages_dir"
        }, 
        {
            "location": "/deployment/#max_bench_num", 
            "text": "{max_bench_num,  integer }  Maximal number of benchmarks running at the same time.  Default value:  1000 .", 
            "title": "max_bench_num"
        }, 
        {
            "location": "/deployment/#vm_args", 
            "text": "{vm_args,  args }  Additional arguments for the [Erlang VM](Additional arguments for the  Erlang VM .  Default value:  [] .", 
            "title": "vm_args"
        }, 
        {
            "location": "/deployment/#ntp_max_timediff", 
            "text": "{ntp_max_timediff,  float }  Maximum timeout between node creation in seconds.  This check is optional and only prints a warning if fails.  Default value:  0.1 .", 
            "title": "ntp_max_timediff"
        }, 
        {
            "location": "/deployment/#dev-parameters", 
            "text": "Set these params only if you are an MZBench developer.", 
            "title": "Dev Parameters"
        }, 
        {
            "location": "/deployment/#bench_read_at_once", 
            "text": "{bench_read_at_once,  integer }  The number of bytes to read from the logs and metrics feed per request.  Default value:  1024", 
            "title": "bench_read_at_once"
        }, 
        {
            "location": "/deployment/#bench_poll_timeout", 
            "text": "{bench_poll_timeout,  integer }  The timeout between requests to logs and metrics feeds in milliseconds.  Default value:  1000", 
            "title": "bench_poll_timeout"
        }, 
        {
            "location": "/deployment/#node_log_port", 
            "text": "{node_log_port,  integer }  The TCP port for the logs feed.  Default value:  4801 .", 
            "title": "node_log_port"
        }, 
        {
            "location": "/deployment/#node_management_port", 
            "text": "{node_management_port,  integer }  The TCP port used to control the server internally.  Default value:  4802 .", 
            "title": "node_management_port"
        }, 
        {
            "location": "/cloud_plugins/", 
            "text": "Built-in Cloud Plugins\n\n\nAmazon EC2\n\n\nmzb_api_ec2_plugin\n\n\nThe module allocates nodes in an Amazon EC2 cloud.\n\n\nThe AWS node images must have Erlang R17+, gcc, gcc-c++, git, and sudo installed. Sudo must be available for non-tty execution; put \nDefaults !requiretty\n in \n/etc/sudoers\n. The SSH and TCP ports 4801-4804 must be open; MZBench uses them internally to send logs and metrics data from nodes to the server.\n\n\nThere\ns a set of ready-to-use Amazon Linux images with all necessary dependencies for all availability zones:\n\n\nErlang 19:\nus-west-2       ami-da24ffba\nus-west-1       ami-77571c17\nus-east-2       ami-86055fe3\nus-east-1       ami-d0efb2c7\neu-west-1       ami-ab8ec7d8\neu-west-2       ami-e2c3d686\neu-central-1    ami-bdaa52d2\nap-northeast-1  ami-7a25841b\nap-northeast-2  ami-99eb3ff7\nap-southeast-1  ami-65c36206\nap-southeast-2  ami-11fac772\nap-south-1      ami-615e2a0e\nsa-east-1       ami-a5c955c9\n\nErlang 18:\nus-west-2       ami-ee8d718e\nus-east-1       ami-61f11f0c\nus-west-1       ami-fc28509c\neu-west-1       ami-4554c136\neu-central-1    ami-8d48a5e2\nap-northeast-1  ami-78a24419\nap-northeast-2  ami-ef579f81\nap-southeast-1  ami-66fd2b05\nap-southeast-2  ami-21634c42\nsa-east-1       ami-7798101b\n\n\n\n\nTo use one of these images, specify it in the cloud plugin config as \nimage_id\n:\n\n\n{image_id, \nami-ee8d718e\n}\n\n\n\n\nYou can, of course, build your own image based on the requirements listed above. \nLearn more\n in the official Amazon docs.\n\n\nConfiguration example:\n\n\n{cloud_plugins, [{ec2, #{module =\n mzb_api_ec2_plugin,\n                         instance_spec =\n [\n                          {image_id, \nami-ee8d718e\n},\n                          {group_set, \n},\n                          {key_name, \n-\n},\n                          {subnet_id, \n-\n},\n                          {instance_type, \nt2.micro\n},\n                          {availability_zone, \nus-west-2a\n}\n                        ],\n                        config =\n [\n                          {ec2_host, \nec2.us-west-2.amazonaws.com\n},\n                          {access_key_id, \n-\n},\n                          {secret_access_key, \n-\n}\n                         ]\n                        instance_user =\n \nec2-user\n,\n                    }}]},\n\n\n\n\nMinimally, the config requires \ninstance_spec\n and \nconfig\n keys specified. Learn more about AWS-specific config in the \nerlcloud documentation\n.\n\n\nTo make allocated nodes accessible: specify \nkey_name\n in configuration above, put associated key to your MZBench server and make ssh use it. Usually it is about adding \nIdentityFile path/to/your/amazonkey.pem\n to \n~/.ssh/config\n or running \nssh-add path/to/your/amazonkey.pem\n.\n\n\nStatic Cloud\n\n\nmzb_staticcloud_plugin\n\n\nThe module uses allocated nodes from a list of hosts.\n\n\nConfiguration example:\n\n\n{cloud_plugins, [{static, #{module =\n mzb_staticcloud_plugin,\n                           hosts =\n [\n123.45.67.89\n, \nhostname\n]\n                           }}]}\n\n\n\n\nDummy\n\n\nmzb_dummycloud_plugin\n\n\nThe module does not allocate any hosts; localhost is used instead.\n\n\nConfiguration example:\n\n\n{cloud_plugins, [{dummy, #{module =\n mzb_dummycloud_plugin}}]}\n\n\n\n\nThe main difference between \ndummycloud\n and \nstaticcloud\n for localhost is that \ndummycloud\n does not provide node exclusivity. It means that you could run several benchmarks on your localhost simultaneously, which is not supported by \nstaticcloud\n.\n\n\nMulticloud\n\n\nmzb_multicloud_plugin\n\n\nCombine multiple plugins to allocate hosts from multiple sources.\n\n\nConfigration example:\n\n\n{cloud_plugins, [\n        {some_cloud_provider1, ...},\n        {some_cloud_provider2, ...},\n        {cloud_multi, #{module =\n mzb_multicloud_plugin,\n                          clouds =\n [\n                              {some_cloud_provider1, 3},\n                              {some_cloud_provider2, 10}\n                      ]}}\n]}\n\n\n\n\nHere, if the cluster is allocated using \ncloud_multi\n, it will contain 3 nodes from \nsome_cloud_provider1\n for every 10 nodes from \nsome_cloud_provider2\n.\n\n\nHow to Write a Cloud Plugin\n\n\nCloud plugin is an Erlang module with at least three methods:\n\n\n-spec start(Name, Opts) -\n PluginRef when\n    Name :: atom(),\n    Opts :: #{},\n    PluginRef :: term().\n\n-spec create_cluster(PluginRef, NumNodes, Config) -\n {ok, ClusterID, UserName, [Host]} when\n    PluginRef :: term(),\n    NumNodes :: pos_integer(),\n    Config :: #{},\n    ClusterID :: term()\n    UserName :: string(),\n    Host :: string().\n\n-spec destroy_cluster(ClusterID) -\n ok when\n    ClusterID :: term().\n\n\n\n\n\n\nstart\n\n\n\n\nStart a particular instance of the plugin and get an instance reference.\n\n\n\n\nName\n\n\nThe name of the particular instance of the plugin specified in the \nconfiguration file\n.\n\n\nOpts\n\n\nOptions passed from the server \nconfiguration file\n for the particular plugin instance.\n\n\n\n\n\n\ncreate_cluster\n\n\n\n\nAllocate the required number of nodes and return a tuple: \n{ok, ClusterID, UserName, HostList}\n.   \n\n\n\n\nNumNodes\n\n\nNumber of nodes to allocate.\n\n\nConfig\n\n\nMap with keys \nuser\n, \nname\n and \ndescription\n.\n\n\nClusterID\n\n\nThis term will be passed to \ndestroy_cluster/1\n when it\ns time it deallocate the nodes. Its content is up to the plugin developer.\n\n\nUserName\n\n\nSSH username to connect to the allocated nodes.\n\n\nHostList\n\n\nList of hostnames or IPs of the allocated nodes.\n\n\n\n\n\n\ndestroy_cluster\n\n\n\n\nDeallocate the required number of nodes and return \nok\n.\n\n\n\n\nClusterID\n\n\nTerm returned by \ncreate_cluster/1\n.\n\n\n\n\n\n\n\n\nUsing the Cloud Plugin\n\n\nSpecify the \nplugin module\n and the \npath to it\n in the MZBench config file in the \nmzbench_api\n section:\n\n\n    [\n      {mzbench_api, [\n        {cloud_plugins, [{my_cloud1, #{module =\n mycloud_plugin,\n                                       Opt1 =\n Value1,\n                                       Opt2 =\n Value2, ...}},\n                         ...\n                        ]},\n        {plugins_dir, \n/path/to/my/plugin\n}\n        ]},\n    ].\n\n\n\n\nThe plugin binaries must be placed in a subdirectory inside \nplugins_dir\n, e.g. \n/mycloud-0.1.1/ebin/mycloud.ebin\n.\n\n\n\n\nNote\n\n\nPlugin will be started using \napplication:ensure_all_started/1\n just before the benchmark start.", 
            "title": "Cloud Plugins"
        }, 
        {
            "location": "/cloud_plugins/#built-in-cloud-plugins", 
            "text": "", 
            "title": "Built-in Cloud Plugins"
        }, 
        {
            "location": "/cloud_plugins/#amazon-ec2", 
            "text": "mzb_api_ec2_plugin  The module allocates nodes in an Amazon EC2 cloud.  The AWS node images must have Erlang R17+, gcc, gcc-c++, git, and sudo installed. Sudo must be available for non-tty execution; put  Defaults !requiretty  in  /etc/sudoers . The SSH and TCP ports 4801-4804 must be open; MZBench uses them internally to send logs and metrics data from nodes to the server.  There s a set of ready-to-use Amazon Linux images with all necessary dependencies for all availability zones:  Erlang 19:\nus-west-2       ami-da24ffba\nus-west-1       ami-77571c17\nus-east-2       ami-86055fe3\nus-east-1       ami-d0efb2c7\neu-west-1       ami-ab8ec7d8\neu-west-2       ami-e2c3d686\neu-central-1    ami-bdaa52d2\nap-northeast-1  ami-7a25841b\nap-northeast-2  ami-99eb3ff7\nap-southeast-1  ami-65c36206\nap-southeast-2  ami-11fac772\nap-south-1      ami-615e2a0e\nsa-east-1       ami-a5c955c9\n\nErlang 18:\nus-west-2       ami-ee8d718e\nus-east-1       ami-61f11f0c\nus-west-1       ami-fc28509c\neu-west-1       ami-4554c136\neu-central-1    ami-8d48a5e2\nap-northeast-1  ami-78a24419\nap-northeast-2  ami-ef579f81\nap-southeast-1  ami-66fd2b05\nap-southeast-2  ami-21634c42\nsa-east-1       ami-7798101b  To use one of these images, specify it in the cloud plugin config as  image_id :  {image_id,  ami-ee8d718e }  You can, of course, build your own image based on the requirements listed above.  Learn more  in the official Amazon docs.  Configuration example:  {cloud_plugins, [{ec2, #{module =  mzb_api_ec2_plugin,\n                         instance_spec =  [\n                          {image_id,  ami-ee8d718e },\n                          {group_set,  },\n                          {key_name,  - },\n                          {subnet_id,  - },\n                          {instance_type,  t2.micro },\n                          {availability_zone,  us-west-2a }\n                        ],\n                        config =  [\n                          {ec2_host,  ec2.us-west-2.amazonaws.com },\n                          {access_key_id,  - },\n                          {secret_access_key,  - }\n                         ]\n                        instance_user =   ec2-user ,\n                    }}]},  Minimally, the config requires  instance_spec  and  config  keys specified. Learn more about AWS-specific config in the  erlcloud documentation .  To make allocated nodes accessible: specify  key_name  in configuration above, put associated key to your MZBench server and make ssh use it. Usually it is about adding  IdentityFile path/to/your/amazonkey.pem  to  ~/.ssh/config  or running  ssh-add path/to/your/amazonkey.pem .", 
            "title": "Amazon EC2"
        }, 
        {
            "location": "/cloud_plugins/#static-cloud", 
            "text": "mzb_staticcloud_plugin  The module uses allocated nodes from a list of hosts.  Configuration example:  {cloud_plugins, [{static, #{module =  mzb_staticcloud_plugin,\n                           hosts =  [ 123.45.67.89 ,  hostname ]\n                           }}]}", 
            "title": "Static Cloud"
        }, 
        {
            "location": "/cloud_plugins/#dummy", 
            "text": "mzb_dummycloud_plugin  The module does not allocate any hosts; localhost is used instead.  Configuration example:  {cloud_plugins, [{dummy, #{module =  mzb_dummycloud_plugin}}]}  The main difference between  dummycloud  and  staticcloud  for localhost is that  dummycloud  does not provide node exclusivity. It means that you could run several benchmarks on your localhost simultaneously, which is not supported by  staticcloud .", 
            "title": "Dummy"
        }, 
        {
            "location": "/cloud_plugins/#multicloud", 
            "text": "mzb_multicloud_plugin  Combine multiple plugins to allocate hosts from multiple sources.  Configration example:  {cloud_plugins, [\n        {some_cloud_provider1, ...},\n        {some_cloud_provider2, ...},\n        {cloud_multi, #{module =  mzb_multicloud_plugin,\n                          clouds =  [\n                              {some_cloud_provider1, 3},\n                              {some_cloud_provider2, 10}\n                      ]}}\n]}  Here, if the cluster is allocated using  cloud_multi , it will contain 3 nodes from  some_cloud_provider1  for every 10 nodes from  some_cloud_provider2 .", 
            "title": "Multicloud"
        }, 
        {
            "location": "/cloud_plugins/#how-to-write-a-cloud-plugin", 
            "text": "Cloud plugin is an Erlang module with at least three methods:  -spec start(Name, Opts) -  PluginRef when\n    Name :: atom(),\n    Opts :: #{},\n    PluginRef :: term().\n\n-spec create_cluster(PluginRef, NumNodes, Config) -  {ok, ClusterID, UserName, [Host]} when\n    PluginRef :: term(),\n    NumNodes :: pos_integer(),\n    Config :: #{},\n    ClusterID :: term()\n    UserName :: string(),\n    Host :: string().\n\n-spec destroy_cluster(ClusterID) -  ok when\n    ClusterID :: term().   start   Start a particular instance of the plugin and get an instance reference.   Name  The name of the particular instance of the plugin specified in the  configuration file .  Opts  Options passed from the server  configuration file  for the particular plugin instance.    create_cluster   Allocate the required number of nodes and return a tuple:  {ok, ClusterID, UserName, HostList} .      NumNodes  Number of nodes to allocate.  Config  Map with keys  user ,  name  and  description .  ClusterID  This term will be passed to  destroy_cluster/1  when it s time it deallocate the nodes. Its content is up to the plugin developer.  UserName  SSH username to connect to the allocated nodes.  HostList  List of hostnames or IPs of the allocated nodes.    destroy_cluster   Deallocate the required number of nodes and return  ok .   ClusterID  Term returned by  create_cluster/1 .", 
            "title": "How to Write a Cloud Plugin"
        }, 
        {
            "location": "/cloud_plugins/#using-the-cloud-plugin", 
            "text": "Specify the  plugin module  and the  path to it  in the MZBench config file in the  mzbench_api  section:      [\n      {mzbench_api, [\n        {cloud_plugins, [{my_cloud1, #{module =  mycloud_plugin,\n                                       Opt1 =  Value1,\n                                       Opt2 =  Value2, ...}},\n                         ...\n                        ]},\n        {plugins_dir,  /path/to/my/plugin }\n        ]},\n    ].  The plugin binaries must be placed in a subdirectory inside  plugins_dir , e.g.  /mycloud-0.1.1/ebin/mycloud.ebin .   Note  Plugin will be started using  application:ensure_all_started/1  just before the benchmark start.", 
            "title": "Using the Cloud Plugin"
        }, 
        {
            "location": "/workers/", 
            "text": "To benchmark a particular protocol or service, MZBench uses a matching \nworker\n.\n\n\nWorker\n is a library of \nstatements\n to access a particular service and collect statistics about its usage. MZBench ships with workers for HTTP and XMPP protocols and a worker that executes console commands, and in many cases they are enough. But if you need to test a specific service, you\nll probably need to write a worker for it.\n\n\nA \nworker\n can be implemented in either \nErlang\n or \nPython\n programming languages. Please note that the support for Erlang programming language is a little bit more complete.\n\n\nHow to Write a Worker\n\n\nCommand Line Utilities\n\n\nMZBench distribution provides \ncommand line utilities\n to assist you during your development effort.\n\n\n\n\nNote\n\n\nAll command examples below are executed in the MZBench directory. To run them from a different location, specify the full path to MZBench:\n\n\n$ /path/to/mzbench/bin/mzbench\n\n\n\n\n\nGenerate\n\n\nFirst, generate an \nErlang\n empty worker application with \nnew_worker\n:\n\n\n$ ./bin/mzbench new_worker \nworker_name\n\n\n\n\n\nIt creates a new directory \nworker_name\n with a minimalistic but fully functional MZBench worker named \nworker_name\n. Particularly interesting files are \nsrc/\nworker_name\n.erl\n, which holds the worker source code, and \nexamples/\nworker_name\n.erl\n, which contains a simple MZBench \nscenario\n using it.\n\n\nIf the worker you develop works over a common protocol like TCP or you wish to develop it using a different programming language, the \nnew_worker\n command can generate your a more elaborate worker already containing the usual boilerplate code for this type of services. List available protocol templates with \nlist_templates\n:\n\n\n$ ./bin/mzbench list_templates\n\n\n\n\nThen generate your worker with the additional \n--template\n parameter:\n\n\n$ ./bin/mzbench new_worker --template \nprotocol\n \nworker_name\n\n\n\n\n\nFor instance, you can generate a \nPython\n based worker using the following command:\n\n\n$ ./bin/mzbench new_worker --template python_empty \nworker_name\n\n\n\n\n\nThe worker entry point is contained in the file \nsrc/\nworker_name\n.py\n in this case.\n\n\nCompile and Debug\n\n\nMZBench lets you quickly build a worker and launch a local instance of a benchmarking scenario without running a server.\n\n\nIn the worker directory, run \nrun_local \nscript\n, where \nscript\n is the path to the scenario to run:\n\n\n$ ./bin/mzbench run_local \nscript\n\n\n\n\n\nYou can define environment variables with the \n--env\n option.\n\n\n\n\nNote\n\n\nAll \nmake_install\n top-level statements are ignored in this execution mode.\n\n\n\n\nExecute\n\n\nAfter debugging, test the worker with a real MZBench server and real cloud nodes. To make it installable on MZBench nodes, specify the worker\ns git address in your benchmark scenario with \nmake_install(git = \nURL\n, branch = \nBranch\n, dir = \nDir\n)\n.\n\n\nSimple HTTP worker example \u2192\n\n\nHow to write an Erlang worker\n\n\n\n\nNote\n\n\nYou need basic Erlang knowledge to understand this tutorial. Refer to \nGetting Started with Erlang User\ns Guide\n or to the \nLearn You Some Erlang for great good!\n book for an introduction to Erlang.\n\n\n\n\nThe Erlang Worker Structure\n\n\nA worker provides DSL statements and metrics. The statements need not to be independent as the worker can have internal state.\n\n\nTo understand the general structure of a worker, let\ns see the source code of the \nsimple_http_worker\n provided with the MZBench distribution:\n\n\n-module(simple_http_worker).\n\n-export([initial_state/0, metrics/0,\n         get/3]).\n\ninitial_state() -\n [].\n\nmetrics() -\n\n    [\n        {group, \nSummary\n, [\n            {graph, #{title =\n \nHTTP Response\n,\n                      units =\n \nN\n,\n                      metrics =\n [{\nhttp_ok\n, counter}, {\nhttp_fail\n, counter}, {\nother_fail\n, counter}]}},\n            {graph, #{title =\n \nLatency\n,\n                      units =\n \nmicroseconds\n,\n                      metrics =\n [{\nlatency\n, histogram}]}}\n        ]}\n    ].\n\nget(State, _Meta, URL) -\n\n    StartTime = os:timestamp(),\n    Response = hackney:request(get, list_to_binary(URL), [], \n, []),\n\n    case Response of\n        {ok, _, _, BodyRef} -\n hackney:skip_body(BodyRef);\n        _ -\n ok\n    end,\n\n    Latency = timer:now_diff(os:timestamp(), StartTime),\n    mzb_metrics:notify({\nlatency\n, histogram}, Latency),\n\n    case Response of\n        {ok, 200, _, _} -\n\n            mzb_metrics:notify({\nhttp_ok\n, counter}, 1);\n        {ok, _, _, _} = Reply -\n\n            lager:error(\nGET failed: ~p\n, [Reply]),\n            mzb_metrics:notify({\nhttp_fail\n, counter}, 1);\n        E -\n\n            lager:error(\nhackney:request failed: ~p\n, [E]),\n            mzb_metrics:notify({\nother_fail\n, counter}, 1)\n    end,\n    {nil, State}.\n\n\n\n\nIt exports three functions: \ninitial_state/0\n, \nmetrics/0\n, and \nget/3\n. The first two are mandatory for any worker. \n\n\n\n\ninitial_state/0\n\n\nSet the worker\ns initial state. Each parallel job has its own state, so this function will be called once per job start.\n\n\nmetrics/0\n\n\nReturn a group of metrics generated by this worker. \nDeclaring Metrics\n.\n\n\n\n\nThe rest of the exported functions define the BDL statements provided by this worker. You can, of course, provide none, although such a worker wouldn\nt be very useful. The \nsimple_http_worker\n, for instance, provides the \nget\n statement to fetch particular HTTP document.\n\n\nHow to Define Statements\n\n\nTo define a BDL statement provided by your worker, export an Erlang function that will be called when this statement is encountered:\n\n\nstatement_name\n(State, Meta, [\nParam1\n, [\nParam2\n, ...]]) -\n\n    {ReturnValue, NewState}.\n\n\n\n\nThe function has the same name as the statement it defines. It accepts at least two parameters: the worker internal state at the moment the statement is executed and \nmeta\n information proplist. The function can also accept any number of other parameters. They correspond to the parameters of the statement.\n\n\nFor example, this function:\n\n\nfoo(State, Meta, X, Y) -\n\n    {nil, State}.\n\n\n\n\nis called as \nfoo(X, Y)\n from a benchmarking scenario.\n\n\nIf you want to use key arguments at your function call as \nfoo(x = 1, y = 2)\n, you need to declare three argument function foo and expect third parameter to be \nproplist\n. For example:\n\n\nfoo(State, Meta, Proplist) -\n\n    1 = proplists:get_value(x, Proplist),\n    2 = proplists:get_value(y, Proplist),\n    {nil, State}.\n\n\n\n\nThe statement function must return a tuple of two values:\n\n\n\n\nthe return value of statement; return \nnil\n if your statement has no return value\n\n\nthe next worker state\n\n\n\n\nStatements are processed sequentially; each statement receives the state from the previous one and passes it further.\n\n\nTwo exceptions are the statements within the \nparallel\n section and iterations within a \nloop\n with \nparallel \n 1\n. In these cases the statements within the same thread share the same sequence of statements, which parallel threads don\nt. The final state of the whole \nparallel\n or \nloop\n statement is the one from the first \nthread\n; other threads\n states don\nt affect the final state.\n\n\nMetrics\n\n\nMetrics are numerical values collected during the scenario execution. They are the main result of your worker and represent the values you want to evaluate with your benchmark.\n\n\nMetric Types\n\n\nMZBench currently support four types of metrics:\n\n\n\n\ncounter\n\n\nA single additive value. New values are simply added to the current one.\n\n\ngauge\n\n\nA single non-additive value. New value replaces the previous one.\n\n\nhistogram\n\n\nA set of numerical values that quantify a distribution of values. New values are added to the distribution.\n\n\nderived\n\n\nEvaluated periodically using user-defined function based on another metric values. \nLearn more\n.\n\n\n\n\nFor example, if you are consuming TCP packets of various sizes and you want to track overall amount of data being transferred, use \ncounter\n. If you are interested in its distribution\u2013mean size, 50 percentile, and so on\u2013you need a \nhistogram\n.\n\n\nDeclaring Metrics\n\n\nDeclare the groups of metrics collected by your worker in the list returned by \nmetrics/0\n. Each group corresponds to a structure with following spec:\n\n\ngraph_group() :: {group, Name :: string(), [graph()]}\n               | graph().\ngraph()       :: {graph, Opts :: #{metrics =\n [metric()],\n                                   units =\n string(),\n                                   title =\n string()}}\n               | [metric()]\n               | metric().\nmetric()      :: {Name :: string(), Type :: metric_type() }\n               | {Name :: string(), Type :: metric_type(), Opts :: map()}.\nmetric_type() :: counter | gauge | histogram.\n\n\n\n\nThis structure has a three-level hierarchy:\n\n\n\n\nGroup of graphs is placed on the top of this hierarchy. It consists of one or more graphs and defines a group of graphs under the same name.\n\n\nGraph consists of one or more metrics that will be plotted on the same chart. Furthermore, you could specify additional options for the chart: units, title, etc.\n\n\nMetric is the lowest unit of this hierarchy. It specifies the name and type of the user-defined metric.\n\n\n\n\nLet\ns see the following metrics declaration:\n\n\nmetrics() -\n [{group, \nHTTP Requests\n, [\n                {graph, #{metrics =\n [{\nsuccess_requests\n, counter}, {\nfailed_requests\n, counter}]}},\n                {graph, #{title =\n \nRequest's latency\n,\n                          units =\n \nms\n,\n                          metrics =\n [{\nlatency\n, histogram}]}}]}].\n\n\n\n\nIn this example, a group of graphs with the name \nHTTP Requests\n is created. It consists of several graphs representing the number of successful and failed requests and the request latencies.\n\n\nA graph can produce several charts. In the example above, the graph for successful and failed request produces two charts: absolute counters and their rps.\n\n\nDynamic metrics declaration\n\n\nMetrics could be also declared during the bench run:\n\n\nmzb_metrics:declare_metrics([{group, \nHTTP Requests\n, [\n                {graph, #{metrics =\n [{\nsuccess_requests\n, counter}, {\nfailed_requests\n, counter}]}},\n                {graph, #{title =\n \nRequest's latency\n,\n                          units =\n \nms\n,\n                          metrics =\n [{\nlatency\n, histogram}]}}]}]).\n\n\n\n\nThis feature is useful if your metric set depends on some external conditions or script configuration.\n\n\nDerived Metrics\n\n\nDerived metrics are basically gauges which are evaluated on the director node every ~10sec. To define a derived metric, specify the \nresolver\n function in the metric opts dictionary. This function is used to evaluate the metric value.\n\n\nTypical example of a derived metric is the current number of pending requests. We specify a function (\npending_requests\n) to calculate the metric value in the metric options and then define the function as simple difference between the number of sent requests and received responses:\n\n\nmetrics() -\n [{group, \nRequests\n, [\n                {graph, #{metrics =\n [\n                    {\nrequests_sent\n, counter},\n                    {\nresponses_received\n, counter},\n                    {\npending_requests\n, derived, #{resolver =\n pending_requests}}]}},\n                ]}].\n\npending_requests() -\n\n    mzb_metrics:get_value(\nrequests_sent\n) - mzb_metrics:get_value(\nresponses_received\n).\n\n\n\n\nHooks\n\n\nPre and post hooks\n let you run custom code before and after a benchmark. Hooks can be applied on every node or only on the director node. You can change any environment variable in your hook handler and use it in your scenario.\n\n\nScenario:\n\n\npre_hook():\n    exec(all, \nyum install mylib\n)\n    worker_call(fetch_url, simple_http_worker)\n\npool(size = 3, worker_type = simple_http_worker):\n    loop(time = 1 sec,\n         rate = ramp(linear, 10 rps, 50 rps)):\n        get(var(\nurl\n, \nhttp://mydomain.com\n))\n\n\n\n\nWorker:\n\n\nfetch_url(Env) -\n\n    {ok, [{\nurl\n, \nhttp://mycdn.com/myresource\n} | Env]}.\n\n\n\n\nUpdating Metrics\n\n\nYou can update a metric from anywhere inside your worker. Simply call the following function:\n\n\nmzb_metrics:notify({\nmetric_name\n, \nmetric_type\n}, \nvalue\n)\n\n\n\n\nThe tuple \n{\"\nmetric_name\n\", \nmetric_type\n}\n is the same that was used during the metric declaration and identifies the metric to update. \nvalue\n is the value to add to the metric.\n\n\nHow to write a Python worker\n\n\n\n\nNote\n\n\nYou need a basic knowledge about the Python programming language to understand this tutorial. Refer to \nThe Python Tutorial\n for an introduction to Python.\n\n\n\n\nThe Python Worker Structure\n\n\nA worker provides DSL statements and metrics. The statements need not to be independent as the worker can have internal state.\n\n\nTo understand the general structure of a worker, let\ns see the source code of the \npython_empty\n worker template provided with the MZBench distribution:\n\n\nimport random\nimport mzbench\n\ndef initial_state():\n    pass\n\n\ndef metrics():\n    return [\n        [\n            ('print', 'counter'),\n            ('print_2', 'counter')\n        ],\n        ('dummy', 'histogram')\n    ]\n\n\ndef my_print(msg):\n    mzbench.notify(('print', 'counter'), 1)\n    mzbench.notify(('print_2', 'counter'), 2)\n\n    print \n{0}\n.format(msg)\n\n    mzbench.notify(('dummy', 'histogram'), random.uniform(0, 1000000000)/7)\n\n\n\n\nIt contains three functions: \ninitial_state()\n, \nmetrics()\n, and \nmy_print()\n. The first two are mandatory for any worker. \n\n\n\n\ninitial_state()\n\n\nUseful to initialize the worker\ns initial state. Each parallel job has its own separate Python interpreter process, so this function will be called once per job start.\n\n\nmetrics()\n\n\nReturn a group of metrics generated by this worker. \nDeclaring Metrics in Python\n.\n\n\n\n\nThe rest of the exported functions define the DSL statements provided by this worker. You can, of course, provide none, although such a worker wouldn\nt be very useful. The \npython_empty\n worker, for instance, provides the \nmy_print\n statement to output a string to the standard output.\n\n\nHow to Define Statements\n\n\nTo define a DSL statement provided by your worker, write a Python function that will be called when this statement is encountered:\n\n\ndef \nstatement_name\n([\nParam1\n, [\nParam2\n, ...]]):\n    [return \nReturnValue\n]\n\n\n\n\nThe function has the same name as the statement it defines. It can accept any number of parameters, they correspond to the parameters of the statement.\n\n\nFor example, this function:\n\n\ndef foo(X, Y):\n    pass\n\n\n\n\nis called as \nfoo(X, Y)\n from a benchmarking scenario.\n\n\nThe statement function may return a value corresponding to the return value of the statement or nothing if the statement has no return value.\n\n\nStatements are processed sequentially in the same interpreter, so the values of the global variables are conserved between calls.\n\n\n\n\nNote\n\n\nPlease beware that the \nparallel\n section and \nparallel \n 1\n option of the \nloop\n \ncan\nt and shouldn\nt be used with the Python based workers.\n\n\n\n\nMetrics\n\n\nMetrics are numerical values collected during the scenario execution. They are the main result of your worker and represent the values you want to evaluate with your benchmark.\n\n\nMetric Types\n\n\nMZBench currently support three types of metrics with the Python based workers:\n\n\n\n\ncounter\n\n\nA single additive value. New values are simply added to the current one.\n\n\ngauge\n\n\nA single non-additive value. New value replaces the previous one.\n\n\nhistogram\n\n\nA set of numerical values that quantify a distribution of values. New values are added to the distribution.\n\n\n\n\nFor example, if you are consuming TCP packets of various sizes and you want to track overall amount of data being transferred, use \ncounter\n. If you are interested in its distribution\u2013mean size, 50 percentile, and so on\u2013you need a \nhistogram\n.\n\n\nDeclaring Metrics in Python\n\n\nDeclare the metrics and the groups of metrics collected by your worker in the list returned by the \nmetrics()\n function. Each metric is a tuple \n(\nName\n, \nType\n)\n where \nName\n is the name of the metric and \nType\n is the metric type. Each group is a list of metrics tuples. A group corresponds to metrics that will be plotted on the same chart.\n\n\nLet\ns see the following metrics declaration:\n\n\ndef metrics():\n    return [\n        [\n            ('print', 'counter'),\n            ('print_2', 'counter')\n        ],\n        ('dummy', 'histogram')\n    ]\n\n\n\n\nIn this example, three metrics are declared. \nprint\n and \nprint_2\n are \ncounters\n and \ndummy\n is a \nhistogram\n. Moreover, the metrics \nprint\n and \nprint_2\n will be plotted on the same graph.\n\n\nUpdating Metrics\n\n\nYou can update a metric from anywhere inside your worker. Simply call the following function:\n\n\nmzbench.notify(('\nmetric_name\n', '\nmetric_type\n'), \nvalue\n)\n\n\n\n\nThe tuple \n('\nmetric_name\n', '\nmetric_type\n')\n is the same that was used during the metric declaration and identifies the metric to update. \nvalue\n is the value to add to the metric.\n\n\nImporting external metrics\n\n\nIt could be useful to have an external data at MZBench dashboard. For this purpose a worker could fetch metrics from outside or implement statsd server and push all the data to MZBench API server. Please refer to \ntcpkali\n worker code as an example.", 
            "title": "Workers"
        }, 
        {
            "location": "/workers/#how-to-write-a-worker", 
            "text": "", 
            "title": "How to Write a Worker"
        }, 
        {
            "location": "/workers/#command-line-utilities", 
            "text": "MZBench distribution provides  command line utilities  to assist you during your development effort.   Note  All command examples below are executed in the MZBench directory. To run them from a different location, specify the full path to MZBench:  $ /path/to/mzbench/bin/mzbench", 
            "title": "Command Line Utilities"
        }, 
        {
            "location": "/workers/#generate", 
            "text": "First, generate an  Erlang  empty worker application with  new_worker :  $ ./bin/mzbench new_worker  worker_name   It creates a new directory  worker_name  with a minimalistic but fully functional MZBench worker named  worker_name . Particularly interesting files are  src/ worker_name .erl , which holds the worker source code, and  examples/ worker_name .erl , which contains a simple MZBench  scenario  using it.  If the worker you develop works over a common protocol like TCP or you wish to develop it using a different programming language, the  new_worker  command can generate your a more elaborate worker already containing the usual boilerplate code for this type of services. List available protocol templates with  list_templates :  $ ./bin/mzbench list_templates  Then generate your worker with the additional  --template  parameter:  $ ./bin/mzbench new_worker --template  protocol   worker_name   For instance, you can generate a  Python  based worker using the following command:  $ ./bin/mzbench new_worker --template python_empty  worker_name   The worker entry point is contained in the file  src/ worker_name .py  in this case.", 
            "title": "Generate"
        }, 
        {
            "location": "/workers/#compile-and-debug", 
            "text": "MZBench lets you quickly build a worker and launch a local instance of a benchmarking scenario without running a server.  In the worker directory, run  run_local  script , where  script  is the path to the scenario to run:  $ ./bin/mzbench run_local  script   You can define environment variables with the  --env  option.   Note  All  make_install  top-level statements are ignored in this execution mode.", 
            "title": "Compile and Debug"
        }, 
        {
            "location": "/workers/#execute", 
            "text": "After debugging, test the worker with a real MZBench server and real cloud nodes. To make it installable on MZBench nodes, specify the worker s git address in your benchmark scenario with  make_install(git =  URL , branch =  Branch , dir =  Dir ) .  Simple HTTP worker example \u2192", 
            "title": "Execute"
        }, 
        {
            "location": "/workers/#how-to-write-an-erlang-worker", 
            "text": "Note  You need basic Erlang knowledge to understand this tutorial. Refer to  Getting Started with Erlang User s Guide  or to the  Learn You Some Erlang for great good!  book for an introduction to Erlang.", 
            "title": "How to write an Erlang worker"
        }, 
        {
            "location": "/workers/#the-erlang-worker-structure", 
            "text": "A worker provides DSL statements and metrics. The statements need not to be independent as the worker can have internal state.  To understand the general structure of a worker, let s see the source code of the  simple_http_worker  provided with the MZBench distribution:  -module(simple_http_worker).\n\n-export([initial_state/0, metrics/0,\n         get/3]).\n\ninitial_state() -  [].\n\nmetrics() - \n    [\n        {group,  Summary , [\n            {graph, #{title =   HTTP Response ,\n                      units =   N ,\n                      metrics =  [{ http_ok , counter}, { http_fail , counter}, { other_fail , counter}]}},\n            {graph, #{title =   Latency ,\n                      units =   microseconds ,\n                      metrics =  [{ latency , histogram}]}}\n        ]}\n    ].\n\nget(State, _Meta, URL) - \n    StartTime = os:timestamp(),\n    Response = hackney:request(get, list_to_binary(URL), [],  , []),\n\n    case Response of\n        {ok, _, _, BodyRef} -  hackney:skip_body(BodyRef);\n        _ -  ok\n    end,\n\n    Latency = timer:now_diff(os:timestamp(), StartTime),\n    mzb_metrics:notify({ latency , histogram}, Latency),\n\n    case Response of\n        {ok, 200, _, _} - \n            mzb_metrics:notify({ http_ok , counter}, 1);\n        {ok, _, _, _} = Reply - \n            lager:error( GET failed: ~p , [Reply]),\n            mzb_metrics:notify({ http_fail , counter}, 1);\n        E - \n            lager:error( hackney:request failed: ~p , [E]),\n            mzb_metrics:notify({ other_fail , counter}, 1)\n    end,\n    {nil, State}.  It exports three functions:  initial_state/0 ,  metrics/0 , and  get/3 . The first two are mandatory for any worker.    initial_state/0  Set the worker s initial state. Each parallel job has its own state, so this function will be called once per job start.  metrics/0  Return a group of metrics generated by this worker.  Declaring Metrics .   The rest of the exported functions define the BDL statements provided by this worker. You can, of course, provide none, although such a worker wouldn t be very useful. The  simple_http_worker , for instance, provides the  get  statement to fetch particular HTTP document.", 
            "title": "The Erlang Worker Structure"
        }, 
        {
            "location": "/workers/#how-to-define-statements", 
            "text": "To define a BDL statement provided by your worker, export an Erlang function that will be called when this statement is encountered:  statement_name (State, Meta, [ Param1 , [ Param2 , ...]]) - \n    {ReturnValue, NewState}.  The function has the same name as the statement it defines. It accepts at least two parameters: the worker internal state at the moment the statement is executed and  meta  information proplist. The function can also accept any number of other parameters. They correspond to the parameters of the statement.  For example, this function:  foo(State, Meta, X, Y) - \n    {nil, State}.  is called as  foo(X, Y)  from a benchmarking scenario.  If you want to use key arguments at your function call as  foo(x = 1, y = 2) , you need to declare three argument function foo and expect third parameter to be  proplist . For example:  foo(State, Meta, Proplist) - \n    1 = proplists:get_value(x, Proplist),\n    2 = proplists:get_value(y, Proplist),\n    {nil, State}.  The statement function must return a tuple of two values:   the return value of statement; return  nil  if your statement has no return value  the next worker state   Statements are processed sequentially; each statement receives the state from the previous one and passes it further.  Two exceptions are the statements within the  parallel  section and iterations within a  loop  with  parallel   1 . In these cases the statements within the same thread share the same sequence of statements, which parallel threads don t. The final state of the whole  parallel  or  loop  statement is the one from the first  thread ; other threads  states don t affect the final state.", 
            "title": "How to Define Statements"
        }, 
        {
            "location": "/workers/#metrics", 
            "text": "Metrics are numerical values collected during the scenario execution. They are the main result of your worker and represent the values you want to evaluate with your benchmark.", 
            "title": "Metrics"
        }, 
        {
            "location": "/workers/#metric-types", 
            "text": "MZBench currently support four types of metrics:   counter  A single additive value. New values are simply added to the current one.  gauge  A single non-additive value. New value replaces the previous one.  histogram  A set of numerical values that quantify a distribution of values. New values are added to the distribution.  derived  Evaluated periodically using user-defined function based on another metric values.  Learn more .   For example, if you are consuming TCP packets of various sizes and you want to track overall amount of data being transferred, use  counter . If you are interested in its distribution\u2013mean size, 50 percentile, and so on\u2013you need a  histogram .", 
            "title": "Metric Types"
        }, 
        {
            "location": "/workers/#declaring-metrics", 
            "text": "Declare the groups of metrics collected by your worker in the list returned by  metrics/0 . Each group corresponds to a structure with following spec:  graph_group() :: {group, Name :: string(), [graph()]}\n               | graph().\ngraph()       :: {graph, Opts :: #{metrics =  [metric()],\n                                   units =  string(),\n                                   title =  string()}}\n               | [metric()]\n               | metric().\nmetric()      :: {Name :: string(), Type :: metric_type() }\n               | {Name :: string(), Type :: metric_type(), Opts :: map()}.\nmetric_type() :: counter | gauge | histogram.  This structure has a three-level hierarchy:   Group of graphs is placed on the top of this hierarchy. It consists of one or more graphs and defines a group of graphs under the same name.  Graph consists of one or more metrics that will be plotted on the same chart. Furthermore, you could specify additional options for the chart: units, title, etc.  Metric is the lowest unit of this hierarchy. It specifies the name and type of the user-defined metric.   Let s see the following metrics declaration:  metrics() -  [{group,  HTTP Requests , [\n                {graph, #{metrics =  [{ success_requests , counter}, { failed_requests , counter}]}},\n                {graph, #{title =   Request's latency ,\n                          units =   ms ,\n                          metrics =  [{ latency , histogram}]}}]}].  In this example, a group of graphs with the name  HTTP Requests  is created. It consists of several graphs representing the number of successful and failed requests and the request latencies.  A graph can produce several charts. In the example above, the graph for successful and failed request produces two charts: absolute counters and their rps.", 
            "title": "Declaring Metrics"
        }, 
        {
            "location": "/workers/#dynamic-metrics-declaration", 
            "text": "Metrics could be also declared during the bench run:  mzb_metrics:declare_metrics([{group,  HTTP Requests , [\n                {graph, #{metrics =  [{ success_requests , counter}, { failed_requests , counter}]}},\n                {graph, #{title =   Request's latency ,\n                          units =   ms ,\n                          metrics =  [{ latency , histogram}]}}]}]).  This feature is useful if your metric set depends on some external conditions or script configuration.", 
            "title": "Dynamic metrics declaration"
        }, 
        {
            "location": "/workers/#derived-metrics", 
            "text": "Derived metrics are basically gauges which are evaluated on the director node every ~10sec. To define a derived metric, specify the  resolver  function in the metric opts dictionary. This function is used to evaluate the metric value.  Typical example of a derived metric is the current number of pending requests. We specify a function ( pending_requests ) to calculate the metric value in the metric options and then define the function as simple difference between the number of sent requests and received responses:  metrics() -  [{group,  Requests , [\n                {graph, #{metrics =  [\n                    { requests_sent , counter},\n                    { responses_received , counter},\n                    { pending_requests , derived, #{resolver =  pending_requests}}]}},\n                ]}].\n\npending_requests() - \n    mzb_metrics:get_value( requests_sent ) - mzb_metrics:get_value( responses_received ).", 
            "title": "Derived Metrics"
        }, 
        {
            "location": "/workers/#hooks", 
            "text": "Pre and post hooks  let you run custom code before and after a benchmark. Hooks can be applied on every node or only on the director node. You can change any environment variable in your hook handler and use it in your scenario.  Scenario:  pre_hook():\n    exec(all,  yum install mylib )\n    worker_call(fetch_url, simple_http_worker)\n\npool(size = 3, worker_type = simple_http_worker):\n    loop(time = 1 sec,\n         rate = ramp(linear, 10 rps, 50 rps)):\n        get(var( url ,  http://mydomain.com ))  Worker:  fetch_url(Env) - \n    {ok, [{ url ,  http://mycdn.com/myresource } | Env]}.", 
            "title": "Hooks"
        }, 
        {
            "location": "/workers/#updating-metrics", 
            "text": "You can update a metric from anywhere inside your worker. Simply call the following function:  mzb_metrics:notify({ metric_name ,  metric_type },  value )  The tuple  {\" metric_name \",  metric_type }  is the same that was used during the metric declaration and identifies the metric to update.  value  is the value to add to the metric.", 
            "title": "Updating Metrics"
        }, 
        {
            "location": "/workers/#how-to-write-a-python-worker", 
            "text": "Note  You need a basic knowledge about the Python programming language to understand this tutorial. Refer to  The Python Tutorial  for an introduction to Python.", 
            "title": "How to write a Python worker"
        }, 
        {
            "location": "/workers/#the-python-worker-structure", 
            "text": "A worker provides DSL statements and metrics. The statements need not to be independent as the worker can have internal state.  To understand the general structure of a worker, let s see the source code of the  python_empty  worker template provided with the MZBench distribution:  import random\nimport mzbench\n\ndef initial_state():\n    pass\n\n\ndef metrics():\n    return [\n        [\n            ('print', 'counter'),\n            ('print_2', 'counter')\n        ],\n        ('dummy', 'histogram')\n    ]\n\n\ndef my_print(msg):\n    mzbench.notify(('print', 'counter'), 1)\n    mzbench.notify(('print_2', 'counter'), 2)\n\n    print  {0} .format(msg)\n\n    mzbench.notify(('dummy', 'histogram'), random.uniform(0, 1000000000)/7)  It contains three functions:  initial_state() ,  metrics() , and  my_print() . The first two are mandatory for any worker.    initial_state()  Useful to initialize the worker s initial state. Each parallel job has its own separate Python interpreter process, so this function will be called once per job start.  metrics()  Return a group of metrics generated by this worker.  Declaring Metrics in Python .   The rest of the exported functions define the DSL statements provided by this worker. You can, of course, provide none, although such a worker wouldn t be very useful. The  python_empty  worker, for instance, provides the  my_print  statement to output a string to the standard output.", 
            "title": "The Python Worker Structure"
        }, 
        {
            "location": "/workers/#how-to-define-statements_1", 
            "text": "To define a DSL statement provided by your worker, write a Python function that will be called when this statement is encountered:  def  statement_name ([ Param1 , [ Param2 , ...]]):\n    [return  ReturnValue ]  The function has the same name as the statement it defines. It can accept any number of parameters, they correspond to the parameters of the statement.  For example, this function:  def foo(X, Y):\n    pass  is called as  foo(X, Y)  from a benchmarking scenario.  The statement function may return a value corresponding to the return value of the statement or nothing if the statement has no return value.  Statements are processed sequentially in the same interpreter, so the values of the global variables are conserved between calls.   Note  Please beware that the  parallel  section and  parallel   1  option of the  loop  \ncan t and shouldn t be used with the Python based workers.", 
            "title": "How to Define Statements"
        }, 
        {
            "location": "/workers/#metrics_1", 
            "text": "Metrics are numerical values collected during the scenario execution. They are the main result of your worker and represent the values you want to evaluate with your benchmark.", 
            "title": "Metrics"
        }, 
        {
            "location": "/workers/#metric-types_1", 
            "text": "MZBench currently support three types of metrics with the Python based workers:   counter  A single additive value. New values are simply added to the current one.  gauge  A single non-additive value. New value replaces the previous one.  histogram  A set of numerical values that quantify a distribution of values. New values are added to the distribution.   For example, if you are consuming TCP packets of various sizes and you want to track overall amount of data being transferred, use  counter . If you are interested in its distribution\u2013mean size, 50 percentile, and so on\u2013you need a  histogram .", 
            "title": "Metric Types"
        }, 
        {
            "location": "/workers/#declaring-metrics-in-python", 
            "text": "Declare the metrics and the groups of metrics collected by your worker in the list returned by the  metrics()  function. Each metric is a tuple  ( Name ,  Type )  where  Name  is the name of the metric and  Type  is the metric type. Each group is a list of metrics tuples. A group corresponds to metrics that will be plotted on the same chart.  Let s see the following metrics declaration:  def metrics():\n    return [\n        [\n            ('print', 'counter'),\n            ('print_2', 'counter')\n        ],\n        ('dummy', 'histogram')\n    ]  In this example, three metrics are declared.  print  and  print_2  are  counters  and  dummy  is a  histogram . Moreover, the metrics  print  and  print_2  will be plotted on the same graph.", 
            "title": "Declaring Metrics in Python"
        }, 
        {
            "location": "/workers/#updating-metrics_1", 
            "text": "You can update a metric from anywhere inside your worker. Simply call the following function:  mzbench.notify((' metric_name ', ' metric_type '),  value )  The tuple  (' metric_name ', ' metric_type ')  is the same that was used during the metric declaration and identifies the metric to update.  value  is the value to add to the metric.", 
            "title": "Updating Metrics"
        }, 
        {
            "location": "/workers/#importing-external-metrics", 
            "text": "It could be useful to have an external data at MZBench dashboard. For this purpose a worker could fetch metrics from outside or implement statsd server and push all the data to MZBench API server. Please refer to  tcpkali  worker code as an example.", 
            "title": "Importing external metrics"
        }
    ]
}